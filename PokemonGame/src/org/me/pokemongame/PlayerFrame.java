/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.me.pokemongame;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Toolkit;
import static java.awt.image.ImageObserver.WIDTH;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import static org.me.pokemongame.BattleFrame.rollLabel1;
import static org.me.pokemongame.BattleFrame.rollLabel2;
import static org.me.pokemongame.PokemonTapaFrame.p;
import static org.me.pokemongame.TabloFrame.jScrollPane1;

/**
 *
 * @author user
 */
public class PlayerFrame extends javax.swing.JFrame {
    public static int numberOfPlayers;
    public static ArrayList<Pokemon> caughtPokemon=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> caughtPokemon1=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> caughtPokemon2=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> caughtPokemon3=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> caughtPokemon4=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> caughtPokemon5=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> caughtPokemon6=new ArrayList<Pokemon>();
    public static ArrayList<Card> objectCard1=new ArrayList<Card>();
    public static ArrayList<Card> objectCard2=new ArrayList<Card>();
    public static ArrayList<Card> objectCard3=new ArrayList<Card>();
    public static ArrayList<Card> objectCard4=new ArrayList<Card>();
    public static ArrayList<Card> objectCard5=new ArrayList<Card>();
    public static ArrayList<Card> objectCard6=new ArrayList<Card>();
    public static ArrayList<Pokemon> faintedPokemon1=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> faintedPokemon2=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> faintedPokemon3=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> faintedPokemon4=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> faintedPokemon5=new ArrayList<Pokemon>();
    public static ArrayList<Pokemon> faintedPokemon6=new ArrayList<Pokemon>();
   public Card cBall=null;

    /**
     * Creates new form PlayerFrame
     */
    public PlayerFrame(int anumbeOfPlayers) {
        
        
        



        this.numberOfPlayers=anumbeOfPlayers;
        initComponents();
        myinitComponents(numberOfPlayers);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        Pokemoncombobox1 = new javax.swing.JComboBox();
        Cardcombobox1 = new javax.swing.JComboBox();
        ShowPokemonButton1 = new javax.swing.JButton();
        ShowCardButton1 = new javax.swing.JButton();
        BattleButton1 = new javax.swing.JButton();
        TradeButton1 = new javax.swing.JButton();
        BattleLabel1 = new javax.swing.JLabel();
        TradeLabel1 = new javax.swing.JLabel();
        WalkDieButton1 = new javax.swing.JButton();
        CatchDieButton1 = new javax.swing.JButton();
        BattleDieButton1 = new javax.swing.JButton();
        WalkDieLabel1 = new javax.swing.JLabel();
        CatchDieLabel1 = new javax.swing.JLabel();
        RollToWalkLabel1 = new javax.swing.JLabel();
        RollToCatchLabel1 = new javax.swing.JLabel();
        RollToBattleLabel1 = new javax.swing.JLabel();
        UseCardButton1 = new javax.swing.JButton();
        DrawDecisionButton1 = new javax.swing.JButton();
        DrawObjectButton1 = new javax.swing.JButton();
        powerpointsButton1 = new javax.swing.JButton();
        powerpointsLabel1 = new javax.swing.JLabel();
        discardButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        Pokemoncombobox2 = new javax.swing.JComboBox();
        Cardcombobox2 = new javax.swing.JComboBox();
        ShowPokemonButton2 = new javax.swing.JButton();
        ShowCardButton2 = new javax.swing.JButton();
        BattleButton2 = new javax.swing.JButton();
        TradeButton2 = new javax.swing.JButton();
        BattleLabel2 = new javax.swing.JLabel();
        TradeLabel2 = new javax.swing.JLabel();
        WalkDieButton2 = new javax.swing.JButton();
        CatchDieButton2 = new javax.swing.JButton();
        BattleDieButton2 = new javax.swing.JButton();
        WalkDieLabel2 = new javax.swing.JLabel();
        CatchDieLabel2 = new javax.swing.JLabel();
        RollToWalkLabel2 = new javax.swing.JLabel();
        RollToCatchLabel2 = new javax.swing.JLabel();
        RollToBattleLabel2 = new javax.swing.JLabel();
        UseCardButton2 = new javax.swing.JButton();
        DrawDecisionButton2 = new javax.swing.JButton();
        DrawObjectButton2 = new javax.swing.JButton();
        powerpointsButton2 = new javax.swing.JButton();
        powerpointsLabel2 = new javax.swing.JLabel();
        discardButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        TradeLabel3 = new javax.swing.JLabel();
        CatchDieLabel3 = new javax.swing.JLabel();
        WalkDieLabel3 = new javax.swing.JLabel();
        ShowCardButton3 = new javax.swing.JButton();
        BattleLabel3 = new javax.swing.JLabel();
        TradeButton3 = new javax.swing.JButton();
        Pokemoncombobox3 = new javax.swing.JComboBox();
        ShowPokemonButton3 = new javax.swing.JButton();
        Cardcombobox3 = new javax.swing.JComboBox();
        WalkDieButton3 = new javax.swing.JButton();
        RollToWalkLabel3 = new javax.swing.JLabel();
        RollToBattleLabel3 = new javax.swing.JLabel();
        RollToCatchLabel3 = new javax.swing.JLabel();
        BattleButton3 = new javax.swing.JButton();
        BattleDieButton3 = new javax.swing.JButton();
        CatchDieButton3 = new javax.swing.JButton();
        DrawDecisionButton3 = new javax.swing.JButton();
        UseCardButton3 = new javax.swing.JButton();
        DrawObjectButton3 = new javax.swing.JButton();
        powerpointsButton3 = new javax.swing.JButton();
        powerpointsLabel3 = new javax.swing.JLabel();
        discardButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        TradeLabel4 = new javax.swing.JLabel();
        CatchDieLabel4 = new javax.swing.JLabel();
        WalkDieLabel4 = new javax.swing.JLabel();
        ShowCardButton4 = new javax.swing.JButton();
        BattleLabel4 = new javax.swing.JLabel();
        TradeButton4 = new javax.swing.JButton();
        Pokemoncombobox4 = new javax.swing.JComboBox();
        ShowPokemonButton4 = new javax.swing.JButton();
        Cardcombobox4 = new javax.swing.JComboBox();
        WalkDieButton4 = new javax.swing.JButton();
        RollToWalkLabel4 = new javax.swing.JLabel();
        RollToBattleLabel4 = new javax.swing.JLabel();
        RollToCatchLabel4 = new javax.swing.JLabel();
        BattleButton4 = new javax.swing.JButton();
        BattleDieButton4 = new javax.swing.JButton();
        CatchDieButton4 = new javax.swing.JButton();
        DrawDecisionButton4 = new javax.swing.JButton();
        UseCardButton4 = new javax.swing.JButton();
        DrawObjectButton4 = new javax.swing.JButton();
        powerpointsButton4 = new javax.swing.JButton();
        powerpointsLabel4 = new javax.swing.JLabel();
        discardButton4 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        TradeLabel5 = new javax.swing.JLabel();
        CatchDieLabel5 = new javax.swing.JLabel();
        WalkDieLabel5 = new javax.swing.JLabel();
        ShowCardButton5 = new javax.swing.JButton();
        BattleLabel5 = new javax.swing.JLabel();
        TradeButton5 = new javax.swing.JButton();
        Pokemoncombobox5 = new javax.swing.JComboBox();
        ShowPokemonButton5 = new javax.swing.JButton();
        Cardcombobox5 = new javax.swing.JComboBox();
        WalkDieButton5 = new javax.swing.JButton();
        RollToWalkLabel5 = new javax.swing.JLabel();
        RollToBattleLabel5 = new javax.swing.JLabel();
        RollToCatchLabel5 = new javax.swing.JLabel();
        BattleButton5 = new javax.swing.JButton();
        BattleDieButton5 = new javax.swing.JButton();
        CatchDieButton5 = new javax.swing.JButton();
        DrawDecisionButton5 = new javax.swing.JButton();
        UseCardButton5 = new javax.swing.JButton();
        DrawObjectButton5 = new javax.swing.JButton();
        powerpointsButton5 = new javax.swing.JButton();
        powerpointsLabel5 = new javax.swing.JLabel();
        discardButton5 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        TradeLabel6 = new javax.swing.JLabel();
        CatchDieLabel6 = new javax.swing.JLabel();
        WalkDieLabel6 = new javax.swing.JLabel();
        ShowCardButton6 = new javax.swing.JButton();
        BattleLabel6 = new javax.swing.JLabel();
        TradeButton6 = new javax.swing.JButton();
        Pokemoncombobox6 = new javax.swing.JComboBox();
        ShowPokemonButton6 = new javax.swing.JButton();
        Cardcombobox6 = new javax.swing.JComboBox();
        WalkDieButton6 = new javax.swing.JButton();
        RollToWalkLabel6 = new javax.swing.JLabel();
        RollToBattleLabel6 = new javax.swing.JLabel();
        RollToCatchLabel6 = new javax.swing.JLabel();
        BattleButton6 = new javax.swing.JButton();
        BattleDieButton6 = new javax.swing.JButton();
        CatchDieButton6 = new javax.swing.JButton();
        DrawDecisionButton6 = new javax.swing.JButton();
        UseCardButton6 = new javax.swing.JButton();
        DrawObjectButton6 = new javax.swing.JButton();
        powerpointsButton6 = new javax.swing.JButton();
        powerpointsLabel6 = new javax.swing.JLabel();
        discardButton6 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Players");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        jTabbedPane1.setBackground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel8.setBackground(new java.awt.Color(0, 0, 0));
        jPanel8.setOpaque(false);
        jPanel8.setLayout(null);

        Pokemoncombobox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel8.add(Pokemoncombobox1);
        Pokemoncombobox1.setBounds(10, 11, 220, 20);

        Cardcombobox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Cardcombobox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cardcombobox1ActionPerformed(evt);
            }
        });
        jPanel8.add(Cardcombobox1);
        Cardcombobox1.setBounds(10, 70, 220, 20);

        ShowPokemonButton1.setText("Show Poke");
        ShowPokemonButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPokemonButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(ShowPokemonButton1);
        ShowPokemonButton1.setBounds(10, 40, 101, 23);

        ShowCardButton1.setText("Show Card");
        ShowCardButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowCardButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(ShowCardButton1);
        ShowCardButton1.setBounds(10, 100, 89, 23);

        BattleButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/battle.png"))); // NOI18N
        BattleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(BattleButton1);
        BattleButton1.setBounds(10, 228, 117, 119);

        TradeButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/rsz_1381764704559.png"))); // NOI18N
        TradeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TradeButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(TradeButton1);
        TradeButton1.setBounds(130, 230, 117, 119);

        BattleLabel1.setBackground(new java.awt.Color(255, 255, 255));
        BattleLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BattleLabel1.setText("BATTLE");
        BattleLabel1.setOpaque(true);
        jPanel8.add(BattleLabel1);
        BattleLabel1.setBounds(25, 199, 86, 22);

        TradeLabel1.setBackground(new java.awt.Color(255, 255, 255));
        TradeLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TradeLabel1.setText("TRADE");
        TradeLabel1.setOpaque(true);
        jPanel8.add(TradeLabel1);
        TradeLabel1.setBounds(150, 200, 77, 23);

        WalkDieButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        WalkDieButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalkDieButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(WalkDieButton1);
        WalkDieButton1.setBounds(10, 385, 40, 41);

        CatchDieButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        CatchDieButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CatchDieButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(CatchDieButton1);
        CatchDieButton1.setBounds(10, 476, 40, 41);

        BattleDieButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        BattleDieButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleDieButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(BattleDieButton1);
        BattleDieButton1.setBounds(10, 555, 40, 41);

        WalkDieLabel1.setBackground(new java.awt.Color(0, 0, 0));
        WalkDieLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        WalkDieLabel1.setForeground(new java.awt.Color(255, 255, 255));
        WalkDieLabel1.setOpaque(true);
        jPanel8.add(WalkDieLabel1);
        WalkDieLabel1.setBounds(60, 390, 50, 30);

        CatchDieLabel1.setBackground(new java.awt.Color(0, 0, 0));
        CatchDieLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CatchDieLabel1.setForeground(new java.awt.Color(255, 255, 255));
        CatchDieLabel1.setOpaque(true);
        jPanel8.add(CatchDieLabel1);
        CatchDieLabel1.setBounds(60, 480, 50, 30);

        RollToWalkLabel1.setBackground(new java.awt.Color(255, 255, 255));
        RollToWalkLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToWalkLabel1.setText("Roll to walk");
        RollToWalkLabel1.setOpaque(true);
        jPanel8.add(RollToWalkLabel1);
        RollToWalkLabel1.setBounds(10, 365, 90, 14);

        RollToCatchLabel1.setBackground(new java.awt.Color(255, 255, 255));
        RollToCatchLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToCatchLabel1.setText("Roll to catch");
        RollToCatchLabel1.setOpaque(true);
        jPanel8.add(RollToCatchLabel1);
        RollToCatchLabel1.setBounds(10, 456, 90, 14);

        RollToBattleLabel1.setBackground(new java.awt.Color(255, 255, 255));
        RollToBattleLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToBattleLabel1.setText("Roll to battle");
        RollToBattleLabel1.setOpaque(true);
        jPanel8.add(RollToBattleLabel1);
        RollToBattleLabel1.setBounds(10, 535, 90, 14);

        UseCardButton1.setText("Use Card");
        UseCardButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseCardButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(UseCardButton1);
        UseCardButton1.setBounds(10, 130, 90, 23);

        DrawDecisionButton1.setText("Draw Decision Card");
        DrawDecisionButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawDecisionButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawDecisionButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(DrawDecisionButton1);
        DrawDecisionButton1.setBounds(110, 370, 150, 50);

        DrawObjectButton1.setText("Draw Object Card");
        DrawObjectButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawObjectButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawObjectButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(DrawObjectButton1);
        DrawObjectButton1.setBounds(110, 430, 150, 50);

        powerpointsButton1.setText("Show powerpoints");
        powerpointsButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerpointsButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(powerpointsButton1);
        powerpointsButton1.setBounds(110, 490, 150, 23);

        powerpointsLabel1.setBackground(new java.awt.Color(0, 0, 0));
        powerpointsLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        powerpointsLabel1.setForeground(new java.awt.Color(255, 255, 255));
        powerpointsLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        powerpointsLabel1.setOpaque(true);
        jPanel8.add(powerpointsLabel1);
        powerpointsLabel1.setBounds(150, 510, 60, 30);

        discardButton1.setText("Discard");
        discardButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(discardButton1);
        discardButton1.setBounds(10, 160, 90, 23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel8, gridBagConstraints);

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/playerframep1.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel7, gridBagConstraints);

        jTabbedPane1.addTab("P.1", jPanel1);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel9.setBackground(new java.awt.Color(0, 0, 0));
        jPanel9.setOpaque(false);
        jPanel9.setLayout(null);

        Pokemoncombobox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel9.add(Pokemoncombobox2);
        Pokemoncombobox2.setBounds(10, 11, 220, 20);

        Cardcombobox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel9.add(Cardcombobox2);
        Cardcombobox2.setBounds(10, 70, 220, 20);

        ShowPokemonButton2.setText("Show Poke");
        ShowPokemonButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPokemonButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(ShowPokemonButton2);
        ShowPokemonButton2.setBounds(10, 40, 101, 23);

        ShowCardButton2.setText("Show Card");
        ShowCardButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowCardButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(ShowCardButton2);
        ShowCardButton2.setBounds(10, 100, 89, 23);

        BattleButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/battle.png"))); // NOI18N
        BattleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(BattleButton2);
        BattleButton2.setBounds(10, 228, 117, 119);

        TradeButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/rsz_1381764704559.png"))); // NOI18N
        TradeButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TradeButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(TradeButton2);
        TradeButton2.setBounds(130, 230, 117, 119);

        BattleLabel2.setBackground(new java.awt.Color(255, 255, 255));
        BattleLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BattleLabel2.setText("BATTLE");
        BattleLabel2.setOpaque(true);
        jPanel9.add(BattleLabel2);
        BattleLabel2.setBounds(25, 199, 86, 22);

        TradeLabel2.setBackground(new java.awt.Color(255, 255, 255));
        TradeLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TradeLabel2.setText("TRADE");
        TradeLabel2.setOpaque(true);
        jPanel9.add(TradeLabel2);
        TradeLabel2.setBounds(150, 200, 77, 23);

        WalkDieButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        WalkDieButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalkDieButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(WalkDieButton2);
        WalkDieButton2.setBounds(10, 385, 40, 41);

        CatchDieButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        CatchDieButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CatchDieButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(CatchDieButton2);
        CatchDieButton2.setBounds(10, 476, 40, 41);

        BattleDieButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        BattleDieButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleDieButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(BattleDieButton2);
        BattleDieButton2.setBounds(10, 555, 40, 41);

        WalkDieLabel2.setBackground(new java.awt.Color(0, 0, 0));
        WalkDieLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        WalkDieLabel2.setForeground(new java.awt.Color(255, 255, 255));
        WalkDieLabel2.setOpaque(true);
        jPanel9.add(WalkDieLabel2);
        WalkDieLabel2.setBounds(60, 390, 50, 30);

        CatchDieLabel2.setBackground(new java.awt.Color(0, 0, 0));
        CatchDieLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CatchDieLabel2.setForeground(new java.awt.Color(255, 255, 255));
        CatchDieLabel2.setOpaque(true);
        jPanel9.add(CatchDieLabel2);
        CatchDieLabel2.setBounds(60, 480, 50, 30);

        RollToWalkLabel2.setBackground(new java.awt.Color(255, 255, 255));
        RollToWalkLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToWalkLabel2.setText("Roll to walk");
        RollToWalkLabel2.setOpaque(true);
        jPanel9.add(RollToWalkLabel2);
        RollToWalkLabel2.setBounds(10, 365, 90, 14);

        RollToCatchLabel2.setBackground(new java.awt.Color(255, 255, 255));
        RollToCatchLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToCatchLabel2.setText("Roll to catch");
        RollToCatchLabel2.setOpaque(true);
        jPanel9.add(RollToCatchLabel2);
        RollToCatchLabel2.setBounds(10, 456, 90, 14);

        RollToBattleLabel2.setBackground(new java.awt.Color(255, 255, 255));
        RollToBattleLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToBattleLabel2.setText("Roll to battle");
        RollToBattleLabel2.setOpaque(true);
        jPanel9.add(RollToBattleLabel2);
        RollToBattleLabel2.setBounds(10, 535, 90, 14);

        UseCardButton2.setText("Use Card");
        UseCardButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseCardButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(UseCardButton2);
        UseCardButton2.setBounds(10, 130, 90, 23);

        DrawDecisionButton2.setText("Draw Decision Card");
        DrawDecisionButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawDecisionButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawDecisionButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(DrawDecisionButton2);
        DrawDecisionButton2.setBounds(110, 370, 150, 50);

        DrawObjectButton2.setText("Draw Object Card");
        DrawObjectButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawObjectButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawObjectButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(DrawObjectButton2);
        DrawObjectButton2.setBounds(110, 430, 150, 50);

        powerpointsButton2.setText("Show powerpoints");
        powerpointsButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerpointsButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(powerpointsButton2);
        powerpointsButton2.setBounds(110, 490, 150, 23);

        powerpointsLabel2.setBackground(new java.awt.Color(0, 0, 0));
        powerpointsLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        powerpointsLabel2.setForeground(new java.awt.Color(255, 255, 255));
        powerpointsLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        powerpointsLabel2.setOpaque(true);
        jPanel9.add(powerpointsLabel2);
        powerpointsLabel2.setBounds(150, 510, 60, 30);

        discardButton2.setText("Discard");
        discardButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(discardButton2);
        discardButton2.setBounds(10, 160, 90, 23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel9, gridBagConstraints);

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/playerframep2.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel8, gridBagConstraints);

        jTabbedPane1.addTab("P.2", jPanel2);

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel10.setBackground(new java.awt.Color(0, 0, 0));
        jPanel10.setOpaque(false);
        jPanel10.setLayout(null);

        TradeLabel3.setBackground(new java.awt.Color(255, 255, 255));
        TradeLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TradeLabel3.setText("TRADE");
        TradeLabel3.setOpaque(true);
        jPanel10.add(TradeLabel3);
        TradeLabel3.setBounds(150, 200, 77, 23);

        CatchDieLabel3.setBackground(new java.awt.Color(0, 0, 0));
        CatchDieLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CatchDieLabel3.setForeground(new java.awt.Color(255, 255, 255));
        CatchDieLabel3.setOpaque(true);
        jPanel10.add(CatchDieLabel3);
        CatchDieLabel3.setBounds(60, 480, 50, 30);

        WalkDieLabel3.setBackground(new java.awt.Color(0, 0, 0));
        WalkDieLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        WalkDieLabel3.setForeground(new java.awt.Color(255, 255, 255));
        WalkDieLabel3.setOpaque(true);
        jPanel10.add(WalkDieLabel3);
        WalkDieLabel3.setBounds(60, 390, 50, 30);

        ShowCardButton3.setText("Show Card");
        ShowCardButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowCardButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(ShowCardButton3);
        ShowCardButton3.setBounds(10, 100, 89, 23);

        BattleLabel3.setBackground(new java.awt.Color(255, 255, 255));
        BattleLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BattleLabel3.setText("BATTLE");
        BattleLabel3.setOpaque(true);
        jPanel10.add(BattleLabel3);
        BattleLabel3.setBounds(25, 199, 86, 22);

        TradeButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/rsz_1381764704559.png"))); // NOI18N
        TradeButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TradeButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(TradeButton3);
        TradeButton3.setBounds(130, 230, 117, 119);

        Pokemoncombobox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel10.add(Pokemoncombobox3);
        Pokemoncombobox3.setBounds(10, 11, 220, 20);

        ShowPokemonButton3.setText("Show Poke");
        ShowPokemonButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPokemonButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(ShowPokemonButton3);
        ShowPokemonButton3.setBounds(10, 40, 101, 23);

        Cardcombobox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel10.add(Cardcombobox3);
        Cardcombobox3.setBounds(10, 70, 220, 20);

        WalkDieButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        WalkDieButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalkDieButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(WalkDieButton3);
        WalkDieButton3.setBounds(10, 385, 40, 41);

        RollToWalkLabel3.setBackground(new java.awt.Color(255, 255, 255));
        RollToWalkLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToWalkLabel3.setText("Roll to walk");
        RollToWalkLabel3.setOpaque(true);
        jPanel10.add(RollToWalkLabel3);
        RollToWalkLabel3.setBounds(10, 365, 90, 14);

        RollToBattleLabel3.setBackground(new java.awt.Color(255, 255, 255));
        RollToBattleLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToBattleLabel3.setText("Roll to battle");
        RollToBattleLabel3.setOpaque(true);
        jPanel10.add(RollToBattleLabel3);
        RollToBattleLabel3.setBounds(10, 535, 90, 14);

        RollToCatchLabel3.setBackground(new java.awt.Color(255, 255, 255));
        RollToCatchLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToCatchLabel3.setText("Roll to catch");
        RollToCatchLabel3.setOpaque(true);
        jPanel10.add(RollToCatchLabel3);
        RollToCatchLabel3.setBounds(10, 456, 90, 14);

        BattleButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/battle.png"))); // NOI18N
        BattleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(BattleButton3);
        BattleButton3.setBounds(10, 228, 117, 119);

        BattleDieButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        BattleDieButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleDieButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(BattleDieButton3);
        BattleDieButton3.setBounds(10, 555, 40, 41);

        CatchDieButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        CatchDieButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CatchDieButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(CatchDieButton3);
        CatchDieButton3.setBounds(10, 476, 40, 41);

        DrawDecisionButton3.setText("Draw Decision Card");
        DrawDecisionButton3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawDecisionButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawDecisionButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(DrawDecisionButton3);
        DrawDecisionButton3.setBounds(110, 370, 150, 50);

        UseCardButton3.setText("Use Card");
        UseCardButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseCardButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(UseCardButton3);
        UseCardButton3.setBounds(10, 130, 90, 23);

        DrawObjectButton3.setText("Draw Object Card");
        DrawObjectButton3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawObjectButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawObjectButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(DrawObjectButton3);
        DrawObjectButton3.setBounds(110, 430, 150, 50);

        powerpointsButton3.setText("Show powerpoints");
        powerpointsButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerpointsButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(powerpointsButton3);
        powerpointsButton3.setBounds(110, 490, 150, 23);

        powerpointsLabel3.setBackground(new java.awt.Color(0, 0, 0));
        powerpointsLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        powerpointsLabel3.setForeground(new java.awt.Color(255, 255, 255));
        powerpointsLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        powerpointsLabel3.setOpaque(true);
        jPanel10.add(powerpointsLabel3);
        powerpointsLabel3.setBounds(150, 510, 60, 30);

        discardButton3.setText("Discard");
        discardButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(discardButton3);
        discardButton3.setBounds(10, 160, 90, 23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel10, gridBagConstraints);

        jLabel9.setBackground(new java.awt.Color(0, 0, 0));
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/playerframep3.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel9, gridBagConstraints);

        jTabbedPane1.addTab("P.3", jPanel3);

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.setOpaque(false);
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel11.setBackground(new java.awt.Color(0, 0, 0));
        jPanel11.setOpaque(false);
        jPanel11.setLayout(null);

        TradeLabel4.setBackground(new java.awt.Color(255, 255, 255));
        TradeLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TradeLabel4.setText("TRADE");
        TradeLabel4.setOpaque(true);
        jPanel11.add(TradeLabel4);
        TradeLabel4.setBounds(150, 200, 77, 23);

        CatchDieLabel4.setBackground(new java.awt.Color(0, 0, 0));
        CatchDieLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CatchDieLabel4.setForeground(new java.awt.Color(255, 255, 255));
        CatchDieLabel4.setOpaque(true);
        jPanel11.add(CatchDieLabel4);
        CatchDieLabel4.setBounds(60, 480, 50, 30);

        WalkDieLabel4.setBackground(new java.awt.Color(0, 0, 0));
        WalkDieLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        WalkDieLabel4.setForeground(new java.awt.Color(255, 255, 255));
        WalkDieLabel4.setOpaque(true);
        jPanel11.add(WalkDieLabel4);
        WalkDieLabel4.setBounds(60, 390, 50, 30);

        ShowCardButton4.setText("Show Card");
        ShowCardButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowCardButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(ShowCardButton4);
        ShowCardButton4.setBounds(10, 100, 89, 23);

        BattleLabel4.setBackground(new java.awt.Color(255, 255, 255));
        BattleLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BattleLabel4.setText("BATTLE");
        BattleLabel4.setOpaque(true);
        jPanel11.add(BattleLabel4);
        BattleLabel4.setBounds(25, 199, 86, 22);

        TradeButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/rsz_1381764704559.png"))); // NOI18N
        TradeButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TradeButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(TradeButton4);
        TradeButton4.setBounds(130, 230, 117, 119);

        Pokemoncombobox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel11.add(Pokemoncombobox4);
        Pokemoncombobox4.setBounds(10, 11, 220, 20);

        ShowPokemonButton4.setText("Show Poke");
        ShowPokemonButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPokemonButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(ShowPokemonButton4);
        ShowPokemonButton4.setBounds(10, 40, 101, 23);

        Cardcombobox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel11.add(Cardcombobox4);
        Cardcombobox4.setBounds(10, 70, 220, 20);

        WalkDieButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        WalkDieButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalkDieButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(WalkDieButton4);
        WalkDieButton4.setBounds(10, 385, 40, 41);

        RollToWalkLabel4.setBackground(new java.awt.Color(255, 255, 255));
        RollToWalkLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToWalkLabel4.setText("Roll to walk");
        RollToWalkLabel4.setOpaque(true);
        jPanel11.add(RollToWalkLabel4);
        RollToWalkLabel4.setBounds(10, 365, 90, 14);

        RollToBattleLabel4.setBackground(new java.awt.Color(255, 255, 255));
        RollToBattleLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToBattleLabel4.setText("Roll to battle");
        RollToBattleLabel4.setOpaque(true);
        jPanel11.add(RollToBattleLabel4);
        RollToBattleLabel4.setBounds(10, 535, 90, 14);

        RollToCatchLabel4.setBackground(new java.awt.Color(255, 255, 255));
        RollToCatchLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToCatchLabel4.setText("Roll to catch");
        RollToCatchLabel4.setOpaque(true);
        jPanel11.add(RollToCatchLabel4);
        RollToCatchLabel4.setBounds(10, 456, 90, 14);

        BattleButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/battle.png"))); // NOI18N
        BattleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(BattleButton4);
        BattleButton4.setBounds(10, 228, 117, 119);

        BattleDieButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        BattleDieButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleDieButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(BattleDieButton4);
        BattleDieButton4.setBounds(10, 555, 40, 41);

        CatchDieButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        CatchDieButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CatchDieButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(CatchDieButton4);
        CatchDieButton4.setBounds(10, 476, 40, 41);

        DrawDecisionButton4.setText("Draw Decision Card");
        DrawDecisionButton4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawDecisionButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawDecisionButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(DrawDecisionButton4);
        DrawDecisionButton4.setBounds(110, 370, 150, 50);

        UseCardButton4.setText("Use Card");
        UseCardButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseCardButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(UseCardButton4);
        UseCardButton4.setBounds(10, 130, 90, 23);

        DrawObjectButton4.setText("Draw Object Card");
        DrawObjectButton4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawObjectButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawObjectButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(DrawObjectButton4);
        DrawObjectButton4.setBounds(110, 430, 150, 50);

        powerpointsButton4.setText("Show powerpoints");
        powerpointsButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerpointsButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(powerpointsButton4);
        powerpointsButton4.setBounds(110, 490, 150, 23);

        powerpointsLabel4.setBackground(new java.awt.Color(0, 0, 0));
        powerpointsLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        powerpointsLabel4.setForeground(new java.awt.Color(255, 255, 255));
        powerpointsLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        powerpointsLabel4.setOpaque(true);
        jPanel11.add(powerpointsLabel4);
        powerpointsLabel4.setBounds(150, 510, 60, 30);

        discardButton4.setText("Discard");
        discardButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardButton4ActionPerformed(evt);
            }
        });
        jPanel11.add(discardButton4);
        discardButton4.setBounds(10, 160, 90, 23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel11, gridBagConstraints);

        jLabel10.setBackground(new java.awt.Color(0, 0, 0));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/playerframep4.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel10, gridBagConstraints);

        jTabbedPane1.addTab("P.4", jPanel4);

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setOpaque(false);
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel12.setBackground(new java.awt.Color(0, 0, 0));
        jPanel12.setOpaque(false);
        jPanel12.setLayout(null);

        TradeLabel5.setBackground(new java.awt.Color(255, 255, 255));
        TradeLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TradeLabel5.setText("TRADE");
        TradeLabel5.setOpaque(true);
        jPanel12.add(TradeLabel5);
        TradeLabel5.setBounds(150, 200, 77, 23);

        CatchDieLabel5.setBackground(new java.awt.Color(0, 0, 0));
        CatchDieLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CatchDieLabel5.setForeground(new java.awt.Color(255, 255, 255));
        CatchDieLabel5.setOpaque(true);
        jPanel12.add(CatchDieLabel5);
        CatchDieLabel5.setBounds(60, 480, 50, 30);

        WalkDieLabel5.setBackground(new java.awt.Color(0, 0, 0));
        WalkDieLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        WalkDieLabel5.setForeground(new java.awt.Color(255, 255, 255));
        WalkDieLabel5.setOpaque(true);
        jPanel12.add(WalkDieLabel5);
        WalkDieLabel5.setBounds(60, 390, 50, 30);

        ShowCardButton5.setText("Show Card");
        ShowCardButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowCardButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(ShowCardButton5);
        ShowCardButton5.setBounds(10, 100, 89, 23);

        BattleLabel5.setBackground(new java.awt.Color(255, 255, 255));
        BattleLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BattleLabel5.setText("BATTLE");
        BattleLabel5.setOpaque(true);
        jPanel12.add(BattleLabel5);
        BattleLabel5.setBounds(25, 199, 86, 22);

        TradeButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/rsz_1381764704559.png"))); // NOI18N
        TradeButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TradeButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(TradeButton5);
        TradeButton5.setBounds(130, 230, 117, 119);

        Pokemoncombobox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel12.add(Pokemoncombobox5);
        Pokemoncombobox5.setBounds(10, 11, 220, 20);

        ShowPokemonButton5.setText("Show Poke");
        ShowPokemonButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPokemonButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(ShowPokemonButton5);
        ShowPokemonButton5.setBounds(10, 40, 101, 23);

        Cardcombobox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel12.add(Cardcombobox5);
        Cardcombobox5.setBounds(10, 70, 220, 20);

        WalkDieButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        WalkDieButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalkDieButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(WalkDieButton5);
        WalkDieButton5.setBounds(10, 385, 40, 41);

        RollToWalkLabel5.setBackground(new java.awt.Color(255, 255, 255));
        RollToWalkLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToWalkLabel5.setText("Roll to walk");
        RollToWalkLabel5.setOpaque(true);
        jPanel12.add(RollToWalkLabel5);
        RollToWalkLabel5.setBounds(10, 365, 90, 14);

        RollToBattleLabel5.setBackground(new java.awt.Color(255, 255, 255));
        RollToBattleLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToBattleLabel5.setText("Roll to battle");
        RollToBattleLabel5.setOpaque(true);
        jPanel12.add(RollToBattleLabel5);
        RollToBattleLabel5.setBounds(10, 535, 90, 14);

        RollToCatchLabel5.setBackground(new java.awt.Color(255, 255, 255));
        RollToCatchLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToCatchLabel5.setText("Roll to catch");
        RollToCatchLabel5.setOpaque(true);
        jPanel12.add(RollToCatchLabel5);
        RollToCatchLabel5.setBounds(10, 456, 90, 14);

        BattleButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/battle.png"))); // NOI18N
        BattleButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(BattleButton5);
        BattleButton5.setBounds(10, 228, 117, 119);

        BattleDieButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        BattleDieButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleDieButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(BattleDieButton5);
        BattleDieButton5.setBounds(10, 555, 40, 41);

        CatchDieButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        CatchDieButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CatchDieButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(CatchDieButton5);
        CatchDieButton5.setBounds(10, 476, 40, 41);

        DrawDecisionButton5.setText("Draw Decision Card");
        DrawDecisionButton5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawDecisionButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawDecisionButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(DrawDecisionButton5);
        DrawDecisionButton5.setBounds(110, 370, 150, 50);

        UseCardButton5.setText("Use Card");
        UseCardButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseCardButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(UseCardButton5);
        UseCardButton5.setBounds(10, 130, 90, 23);

        DrawObjectButton5.setText("Draw Object Card");
        DrawObjectButton5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawObjectButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawObjectButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(DrawObjectButton5);
        DrawObjectButton5.setBounds(110, 430, 150, 50);

        powerpointsButton5.setText("Show powerpoints");
        powerpointsButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerpointsButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(powerpointsButton5);
        powerpointsButton5.setBounds(110, 490, 150, 23);

        powerpointsLabel5.setBackground(new java.awt.Color(0, 0, 0));
        powerpointsLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        powerpointsLabel5.setForeground(new java.awt.Color(255, 255, 255));
        powerpointsLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        powerpointsLabel5.setOpaque(true);
        jPanel12.add(powerpointsLabel5);
        powerpointsLabel5.setBounds(150, 510, 60, 30);

        discardButton5.setText("Discard");
        discardButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(discardButton5);
        discardButton5.setBounds(10, 160, 90, 23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jPanel12, gridBagConstraints);

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/playerframep5.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jLabel11, gridBagConstraints);

        jTabbedPane1.addTab("P.5", jPanel5);

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));
        jPanel6.setOpaque(false);
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel13.setBackground(new java.awt.Color(0, 0, 0));
        jPanel13.setOpaque(false);
        jPanel13.setLayout(null);

        TradeLabel6.setBackground(new java.awt.Color(255, 255, 255));
        TradeLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TradeLabel6.setText("TRADE");
        TradeLabel6.setOpaque(true);
        jPanel13.add(TradeLabel6);
        TradeLabel6.setBounds(150, 200, 77, 23);

        CatchDieLabel6.setBackground(new java.awt.Color(0, 0, 0));
        CatchDieLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CatchDieLabel6.setForeground(new java.awt.Color(255, 255, 255));
        CatchDieLabel6.setOpaque(true);
        jPanel13.add(CatchDieLabel6);
        CatchDieLabel6.setBounds(60, 480, 50, 30);

        WalkDieLabel6.setBackground(new java.awt.Color(0, 0, 0));
        WalkDieLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        WalkDieLabel6.setForeground(new java.awt.Color(255, 255, 255));
        WalkDieLabel6.setOpaque(true);
        jPanel13.add(WalkDieLabel6);
        WalkDieLabel6.setBounds(60, 390, 50, 30);

        ShowCardButton6.setText("Show Card");
        ShowCardButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowCardButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(ShowCardButton6);
        ShowCardButton6.setBounds(10, 100, 89, 23);

        BattleLabel6.setBackground(new java.awt.Color(255, 255, 255));
        BattleLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BattleLabel6.setText("BATTLE");
        BattleLabel6.setOpaque(true);
        jPanel13.add(BattleLabel6);
        BattleLabel6.setBounds(25, 199, 86, 22);

        TradeButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/rsz_1381764704559.png"))); // NOI18N
        TradeButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TradeButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(TradeButton6);
        TradeButton6.setBounds(130, 230, 117, 119);

        Pokemoncombobox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Pokemoncombobox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pokemoncombobox6ActionPerformed(evt);
            }
        });
        jPanel13.add(Pokemoncombobox6);
        Pokemoncombobox6.setBounds(10, 11, 220, 20);

        ShowPokemonButton6.setText("Show Poke");
        ShowPokemonButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPokemonButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(ShowPokemonButton6);
        ShowPokemonButton6.setBounds(10, 40, 101, 23);

        Cardcombobox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel13.add(Cardcombobox6);
        Cardcombobox6.setBounds(10, 70, 220, 20);

        WalkDieButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        WalkDieButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalkDieButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(WalkDieButton6);
        WalkDieButton6.setBounds(10, 385, 40, 41);

        RollToWalkLabel6.setBackground(new java.awt.Color(255, 255, 255));
        RollToWalkLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToWalkLabel6.setText("Roll to walk");
        RollToWalkLabel6.setOpaque(true);
        jPanel13.add(RollToWalkLabel6);
        RollToWalkLabel6.setBounds(10, 365, 90, 14);

        RollToBattleLabel6.setBackground(new java.awt.Color(255, 255, 255));
        RollToBattleLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToBattleLabel6.setText("Roll to battle");
        RollToBattleLabel6.setOpaque(true);
        jPanel13.add(RollToBattleLabel6);
        RollToBattleLabel6.setBounds(10, 535, 90, 14);

        RollToCatchLabel6.setBackground(new java.awt.Color(255, 255, 255));
        RollToCatchLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RollToCatchLabel6.setText("Roll to catch");
        RollToCatchLabel6.setOpaque(true);
        jPanel13.add(RollToCatchLabel6);
        RollToCatchLabel6.setBounds(10, 456, 90, 14);

        BattleButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/battle.png"))); // NOI18N
        BattleButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(BattleButton6);
        BattleButton6.setBounds(10, 228, 117, 119);

        BattleDieButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        BattleDieButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleDieButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(BattleDieButton6);
        BattleDieButton6.setBounds(10, 555, 40, 41);

        CatchDieButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/dice.svg.png"))); // NOI18N
        CatchDieButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CatchDieButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(CatchDieButton6);
        CatchDieButton6.setBounds(10, 476, 40, 41);

        DrawDecisionButton6.setText("Draw Decision Card");
        DrawDecisionButton6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawDecisionButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawDecisionButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(DrawDecisionButton6);
        DrawDecisionButton6.setBounds(110, 370, 150, 50);

        UseCardButton6.setText("Use Card");
        UseCardButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseCardButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(UseCardButton6);
        UseCardButton6.setBounds(10, 130, 90, 23);

        DrawObjectButton6.setText("Draw Object Card");
        DrawObjectButton6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DrawObjectButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawObjectButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(DrawObjectButton6);
        DrawObjectButton6.setBounds(110, 430, 150, 50);

        powerpointsButton6.setText("Show powerpoints");
        powerpointsButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerpointsButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(powerpointsButton6);
        powerpointsButton6.setBounds(110, 490, 150, 23);

        powerpointsLabel6.setBackground(new java.awt.Color(0, 0, 0));
        powerpointsLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        powerpointsLabel6.setForeground(new java.awt.Color(255, 255, 255));
        powerpointsLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        powerpointsLabel6.setOpaque(true);
        jPanel13.add(powerpointsLabel6);
        powerpointsLabel6.setBounds(150, 510, 60, 30);

        discardButton6.setText("Discard");
        discardButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(discardButton6);
        discardButton6.setBounds(10, 160, 90, 23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jPanel13, gridBagConstraints);

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/pokemongame/playerframep6.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jLabel12, gridBagConstraints);

        jTabbedPane1.addTab("P.6", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void WalkDieButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalkDieButton1ActionPerformed
        
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 WalkDieLabel1.setText(zaria);

 
 
 Toolkit tk = Toolkit.getDefaultToolkit();
    Dimension d = tk.getScreenSize();
    Insets scnMax = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
int taskBarSize = scnMax.bottom;

  JScrollBar vertical = jScrollPane1.getVerticalScrollBar();
  vertical.setValue(TabloFrame.jLabel1.getY()-(d.height-taskBarSize)/2);
  
  JScrollBar horizontal = jScrollPane1.getHorizontalScrollBar();
   horizontal.setValue(TabloFrame.jLabel1.getX()-500);
  
for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}



    }//GEN-LAST:event_WalkDieButton1ActionPerformed

    private void CatchDieButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CatchDieButton1ActionPerformed

        int caughtFlag=0;
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
  CatchDieLabel1.setText(zaria);
  
   boolean timeFlag=false;
for(int i=0; i< PlayerFrame.objectCard1.size(); i++){
    if( PlayerFrame.objectCard1.get(i).getName()=="TimeMachine"){        
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard1.remove(i);
     PlayerFrame.Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }

for(int i=0; i< PlayerFrame.objectCard2.size(); i++){
    if( PlayerFrame.objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard2.remove(i);
     PlayerFrame.Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }
if( PlayerFrame.numberOfPlayers>=3){
for(int i=0; i< PlayerFrame.objectCard3.size(); i++){
    if( PlayerFrame.objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard3.remove(i);
     PlayerFrame.Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=4){
for(int i=0; i< PlayerFrame.objectCard4.size(); i++){
    if( PlayerFrame.objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard4.remove(i);
     PlayerFrame.Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=5){
for(int i=0; i< PlayerFrame.objectCard5.size(); i++){
    if( PlayerFrame.objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard5.remove(i);
     PlayerFrame.Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=6){
for(int i=0; i< PlayerFrame.objectCard6.size(); i++){
    if( PlayerFrame.objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard6.remove(i);
     PlayerFrame.Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

 
  
   
   
   
   if(!timeFlag){
   
      for(int i=0;i<PokemonTapaFrame.p.getDice().length;i++)
{
    if(PokemonTapaFrame.p.dice[i]==roll && !caughtPokemon.contains(PokemonTapaFrame.p)){
        
        caughtPokemon1.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox1.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon1.size(); j++){
            
            Pokemoncombobox1.addItem(caughtPokemon1.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
}
    else if(cBall!=null)
    {
        if(cBall.getName()=="GreatBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll-1 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon1.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox1.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
 if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon1.size(); j++){
            
            Pokemoncombobox1.addItem(caughtPokemon1.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
        else if(cBall.getName()=="UltraBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon1.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox1.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon1.size(); j++){
            
            Pokemoncombobox1.addItem(caughtPokemon1.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
            
         }
      
    }
            }
        }
        else if(cBall.getName()=="MasterBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+3 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+4 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon1.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox1.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon1.size(); j++){
            
            Pokemoncombobox1.addItem(caughtPokemon1.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
            
        
    }
    


} 
      if(caughtFlag==0)
              JOptionPane.showMessageDialog(rootPane, "Oh no! " + p.getName()+ " broke free!", ":( ", WIDTH);

      cBall=null;
    }//GEN-LAST:event_CatchDieButton1ActionPerformed
    if(caughtFlag==1)
    {
        for(int i=0; i<caughtPokemon1.size(); i++)
        {
            if(caughtPokemon1.get(i).getFirstPrevo()!=null)
            {
                for(int j=0; j<caughtPokemon1.size(); j++)
                {
                    if(caughtPokemon1.get(i).getFirstPrevo()==caughtPokemon1.get(j).getName())
                    {
                        if(caughtPokemon1.get(i).getSecondPrevo()==null)
                        {
                            caughtPokemon1.get(i).setAttack(caughtPokemon1.get(i).getAttack() +3);
                                                        JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon1.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                        }
                        else if(caughtPokemon1.get(i).getSecondPrevo()!=null)
                        {
                            for(int x=0; x<caughtPokemon1.size(); x++)
                            {
                                if(caughtPokemon1.get(i).getSecondPrevo()==caughtPokemon1.get(x).getName())
                                {
                                    caughtPokemon1.get(i).setAttack(caughtPokemon1.get(i).getAttack() +5);
                                                                JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon1.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                                }
                            }
                        }
                    }
                }
                
            
        
        
    }
        }
    }
    }
    private void BattleDieButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleDieButton1ActionPerformed
        
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 
 if(BattleFrame.playerNumber==1)
    rollLabel1.setText(zaria);
 if(BattleFrame.battleWithPlayer==1)
rollLabel2.setText(zaria); 
 
 boolean timeFlag1=false;
 for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
    timeFlag1=true;
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}
 
 if(!timeFlag1)
 {
if(BattleFrame.playerNumber==1)
    BattleFrame.setRollLabel(zaria);
 if(BattleFrame.battleWithPlayer==1)
     BattleFrame.setRollLabel2(zaria);
 }
    }//GEN-LAST:event_BattleDieButton1ActionPerformed
  
    
    private void ShowPokemonButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPokemonButton1ActionPerformed
 if((String) Pokemoncombobox1.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No pokemon chosen! ", "Error! ", WIDTH);

        }
         else{

        new ShowPokemonFrame((String) Pokemoncombobox1.getSelectedItem(),1).setVisible(true);
        
 }
    }//GEN-LAST:event_ShowPokemonButton1ActionPerformed

    private void ShowCardButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowCardButton1ActionPerformed
     
         if((String) Cardcombobox1.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No card chosen! ", "Error! ", WIDTH);

        }
         else{
        new ShowCardFrame((String) Cardcombobox1.getSelectedItem()).setVisible(true);
         }
    }//GEN-LAST:event_ShowCardButton1ActionPerformed

    private void DrawDecisionButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawDecisionButton1ActionPerformed
             
        

        
Card c=Card.decisionArray.get(0);
Card.decisionArray.add(c);
Card.decisionArray.remove(0);

       
              new ShowCardFrame(c.getName()).setVisible(true);
             int f=0;
            if(c.getName()=="PokeCenter"){
                for(int i=0; i<caughtPokemon1.size(); i++){
                    if(!caughtPokemon1.get(i).isAlive()){
                        f=1;
                    }
                        
                }
                if(f==1)
                {
                    new PokeCenterFrame(1).setVisible(true);
                }
                else{
                                    JOptionPane.showMessageDialog(rootPane, "You have no fainted Pokemon! ", ":) ", WIDTH);

                }
            
            }
            else if(c.getName()=="Trade")
            {
                new TradeFrame(1).setVisible(true);
            }
            else if(c.getName()=="KartaTyxis")
            {
                new KartaTyxisFrame(1).setVisible(true);
            }
            else if(c.getName()=="Battle"){boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon1.size();i++){
            if(PlayerFrame.caughtPokemon1.get(i).isAlive()){
                new ChallengeFrame(1).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }
       
            }              
    }//GEN-LAST:event_DrawDecisionButton1ActionPerformed

    private void DrawObjectButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawObjectButton1ActionPerformed
     


Card c=Card.objectArray.get(0);
Card.objectArray.add(c);
Card.objectArray.remove(0);
objectCard1.add(c);
        Cardcombobox1.removeAllItems();
        for(int j=0; j<objectCard1.size(); j++){
            
            Cardcombobox1.addItem(objectCard1.get(j).getName());
            
        }
     
        new ShowCardFrame(c.getName()).setVisible(true);
if(objectCard1.size()>7){
            JOptionPane.showMessageDialog(rootPane, "You have more than 7 cards! Use or discard some ", "Attention!! ", WIDTH);
            
        
}
    }//GEN-LAST:event_DrawObjectButton1ActionPerformed

    private void ShowPokemonButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPokemonButton2ActionPerformed
if((String) Pokemoncombobox2.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No pokemon chosen! ", "Error! ", WIDTH);

        }
         else{

        new ShowPokemonFrame((String) Pokemoncombobox2.getSelectedItem(),2).setVisible(true);
        
 }    }//GEN-LAST:event_ShowPokemonButton2ActionPerformed

    private void ShowCardButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowCardButton2ActionPerformed
 if((String) Cardcombobox2.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No card chosen! ", "Error! ", WIDTH);

        }
         else{
        new ShowCardFrame((String) Cardcombobox2.getSelectedItem()).setVisible(true);
         }    }//GEN-LAST:event_ShowCardButton2ActionPerformed

    private void WalkDieButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalkDieButton2ActionPerformed
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 
 Toolkit tk = Toolkit.getDefaultToolkit();
    Dimension d = tk.getScreenSize();
    Insets scnMax = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
int taskBarSize = scnMax.bottom;

  JScrollBar vertical = jScrollPane1.getVerticalScrollBar();
  vertical.setValue(TabloFrame.jLabel2.getY()-(d.height-taskBarSize)/2);
  
  JScrollBar horizontal = jScrollPane1.getHorizontalScrollBar();
   horizontal.setValue(TabloFrame.jLabel2.getX()-500);
 
/*
 WalkDieLabel2.setText(zaria);    }//GEN-LAST:event_WalkDieButton2ActionPerformed
*/
  WalkDieLabel2.setText(zaria);   
  for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}  
    
    
    
    
    
    }
    
    
    private void CatchDieButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CatchDieButton2ActionPerformed
  
     int caughtFlag=0;
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
  CatchDieLabel2.setText(zaria);
  
   boolean timeFlag=false;
for(int i=0; i< PlayerFrame.objectCard1.size(); i++){
    if( PlayerFrame.objectCard1.get(i).getName()=="TimeMachine"){        
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard1.remove(i);
     PlayerFrame.Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }

for(int i=0; i< PlayerFrame.objectCard2.size(); i++){
    if( PlayerFrame.objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard2.remove(i);
     PlayerFrame.Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }
if( PlayerFrame.numberOfPlayers>=3){
for(int i=0; i< PlayerFrame.objectCard3.size(); i++){
    if( PlayerFrame.objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard3.remove(i);
     PlayerFrame.Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=4){
for(int i=0; i< PlayerFrame.objectCard4.size(); i++){
    if( PlayerFrame.objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard4.remove(i);
     PlayerFrame.Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=5){
for(int i=0; i< PlayerFrame.objectCard5.size(); i++){
    if( PlayerFrame.objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard5.remove(i);
     PlayerFrame.Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=6){
for(int i=0; i< PlayerFrame.objectCard6.size(); i++){
    if( PlayerFrame.objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard6.remove(i);
     PlayerFrame.Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

 
  
   
   
   
   if(!timeFlag){
   
      for(int i=0;i<PokemonTapaFrame.p.getDice().length;i++)
{
    if(PokemonTapaFrame.p.dice[i]==roll && !caughtPokemon.contains(PokemonTapaFrame.p)){
        
        caughtPokemon2.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox2.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon2.size(); j++){
            
            Pokemoncombobox2.addItem(caughtPokemon2.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
}
    else if(cBall!=null)
    {
        if(cBall.getName()=="GreatBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll-1 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon2.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox2.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
 if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon2.size(); j++){
            
            Pokemoncombobox2.addItem(caughtPokemon2.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
        else if(cBall.getName()=="UltraBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon2.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox2.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon2.size(); j++){
            
            Pokemoncombobox2.addItem(caughtPokemon2.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
            
         }
      
    }
            }
        }
        else if(cBall.getName()=="MasterBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+3 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+4 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon2.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox2.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon2.size(); j++){
            
            Pokemoncombobox2.addItem(caughtPokemon2.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
            
        
    }
    


} 
      if(caughtFlag==0)
          
              JOptionPane.showMessageDialog(rootPane, "Oh no! " + p.getName()+ " broke free!", ":( ", WIDTH);

      cBall=null;
    }                                               
    
   if(caughtFlag==1)
   {
       {
        for(int i=0; i<caughtPokemon2.size(); i++)
        {
            if(caughtPokemon2.get(i).getFirstPrevo()!=null)
            {
                for(int j=0; j<caughtPokemon2.size(); j++)
                {
                    if(caughtPokemon2.get(i).getFirstPrevo()==caughtPokemon2.get(j).getName())
                    {
                        if(caughtPokemon2.get(i).getSecondPrevo()==null)
                        {
                            caughtPokemon2.get(i).setAttack(caughtPokemon2.get(i).getAttack() +3);
                                                        JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon2.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                        }
                        else if(caughtPokemon2.get(i).getSecondPrevo()!=null)
                        {
                            for(int x=0; x<caughtPokemon2.size(); x++)
                            {
                                if(caughtPokemon2.get(i).getSecondPrevo()==caughtPokemon2.get(x).getName())
                                {
                                    caughtPokemon2.get(i).setAttack(caughtPokemon2.get(i).getAttack() +5);
                                                                JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon2.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                                }
                            }
                        }
                    }
                }
                
            
        
        
    }
        }
    
   }
   }
    }//GEN-LAST:event_CatchDieButton2ActionPerformed

    private void BattleDieButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleDieButton2ActionPerformed
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 
 if(BattleFrame.playerNumber==2)
    rollLabel1.setText(zaria);
 if(BattleFrame.battleWithPlayer==2)
rollLabel2.setText(zaria); 
 
 boolean timeFlag1=false;
 for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
    timeFlag1=true;
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}
 
 if(!timeFlag1)
 {
 
if(BattleFrame.playerNumber==2)
    BattleFrame.setRollLabel(zaria);
 if(BattleFrame.battleWithPlayer==2)
     BattleFrame.setRollLabel2(zaria);
 }
 /*
  BattleDieLabel2.setText(zaria);    }//GEN-LAST:event_BattleDieButton2ActionPerformed
*/
    }
    private void DrawDecisionButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawDecisionButton2ActionPerformed

        
Card c=Card.decisionArray.get(0);
Card.decisionArray.add(c);
Card.decisionArray.remove(0);

       
              new ShowCardFrame(c.getName()).setVisible(true);
              int f=0;
            if(c.getName()=="PokeCenter"){
                for(int i=0; i<caughtPokemon2.size(); i++){
                    if(!caughtPokemon2.get(i).isAlive()){
                        f=1;
                    }
                        
                }
                if(f==1)
                {
                    new PokeCenterFrame(2).setVisible(true);;
                }
                else{
                                    JOptionPane.showMessageDialog(rootPane, "You have no fainted Pokemon! ", ":) ", WIDTH);

                }
            
            }else if(c.getName()=="Trade")
            {
                new TradeFrame(2).setVisible(true);
            }else if(c.getName()=="KartaTyxis")
            {
                new KartaTyxisFrame(2).setVisible(true);
            }
            else if(c.getName()=="Battle"){boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon2.size();i++){
            if(PlayerFrame.caughtPokemon2.get(i).isAlive()){
                new ChallengeFrame(2).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }}
                }//GEN-LAST:event_DrawDecisionButton2ActionPerformed

    private void DrawObjectButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawObjectButton2ActionPerformed

        Card c=Card.objectArray.get(0);
Card.objectArray.add(c);
Card.objectArray.remove(0);
objectCard2.add(c);
        Cardcombobox2.removeAllItems();
        for(int j=0; j<objectCard2.size(); j++){
            
            Cardcombobox2.addItem(objectCard2.get(j).getName());
            
        
}

    /*
        new ShowCardFrame(c.getName()).setVisible(true);    }//GEN-LAST:event_DrawObjectButton2ActionPerformed
*/
    new ShowCardFrame(c.getName()).setVisible(true);       
    if(objectCard2.size()>7){
            JOptionPane.showMessageDialog(rootPane, "You have more than 7 cards! Use or discard some ", "Attention!! ", WIDTH);
            
        
}
    }
    
    
    private void ShowCardButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowCardButton3ActionPerformed
 if((String) Cardcombobox3.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No card chosen! ", "Error! ", WIDTH);

        }
         else{
        new ShowCardFrame((String) Cardcombobox3.getSelectedItem()).setVisible(true);
         }    }//GEN-LAST:event_ShowCardButton3ActionPerformed

    private void ShowPokemonButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPokemonButton3ActionPerformed
if((String) Pokemoncombobox3.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No pokemon chosen! ", "Error! ", WIDTH);

        }
         else{

        new ShowPokemonFrame((String) Pokemoncombobox3.getSelectedItem(),3).setVisible(true);
        
 }    }//GEN-LAST:event_ShowPokemonButton3ActionPerformed

    private void WalkDieButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalkDieButton3ActionPerformed
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 
 Toolkit tk = Toolkit.getDefaultToolkit();
    Dimension d = tk.getScreenSize();
    Insets scnMax = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
int taskBarSize = scnMax.bottom;

  JScrollBar vertical = jScrollPane1.getVerticalScrollBar();
  vertical.setValue(TabloFrame.jLabel3.getY()-(d.height-taskBarSize)/2);
  
  JScrollBar horizontal = jScrollPane1.getHorizontalScrollBar();
   horizontal.setValue(TabloFrame.jLabel3.getX()-500);
/*   
 WalkDieLabel3.setText(zaria);    }//GEN-LAST:event_WalkDieButton3ActionPerformed
*/
   WalkDieLabel3.setText(zaria);   
  for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}  
    
    
    }  
   
   
    private void BattleDieButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleDieButton3ActionPerformed
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 
 if(BattleFrame.playerNumber==3)
    rollLabel1.setText(zaria);
 if(BattleFrame.battleWithPlayer==3)
rollLabel2.setText(zaria); 
 
 boolean timeFlag1=false;
 for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
    timeFlag1=true;
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, " TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}
 
 if(!timeFlag1)
 {
 
 
if(BattleFrame.playerNumber==3)
    BattleFrame.setRollLabel(zaria);
 if(BattleFrame.battleWithPlayer==3)
     BattleFrame.setRollLabel2(zaria);
 }
 /*
  BattleDieLabel3.setText(zaria);    }//GEN-LAST:event_BattleDieButton3ActionPerformed
*/
    }
    
    private void CatchDieButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CatchDieButton3ActionPerformed
  int caughtFlag=0;
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
  CatchDieLabel3.setText(zaria);
  
   boolean timeFlag=false;
for(int i=0; i< PlayerFrame.objectCard1.size(); i++){
    if( PlayerFrame.objectCard1.get(i).getName()=="TimeMachine"){        
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard1.remove(i);
     PlayerFrame.Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }

for(int i=0; i< PlayerFrame.objectCard2.size(); i++){
    if( PlayerFrame.objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard2.remove(i);
     PlayerFrame.Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }
if( PlayerFrame.numberOfPlayers>=3){
for(int i=0; i< PlayerFrame.objectCard3.size(); i++){
    if( PlayerFrame.objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard3.remove(i);
     PlayerFrame.Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=4){
for(int i=0; i< PlayerFrame.objectCard4.size(); i++){
    if( PlayerFrame.objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard4.remove(i);
     PlayerFrame.Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=5){
for(int i=0; i< PlayerFrame.objectCard5.size(); i++){
    if( PlayerFrame.objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard5.remove(i);
     PlayerFrame.Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=6){
for(int i=0; i< PlayerFrame.objectCard6.size(); i++){
    if( PlayerFrame.objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard6.remove(i);
     PlayerFrame.Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

 
  
   
   
   
   if(!timeFlag){
   
      for(int i=0;i<PokemonTapaFrame.p.getDice().length;i++)
{
    if(PokemonTapaFrame.p.dice[i]==roll && !caughtPokemon.contains(PokemonTapaFrame.p)){
        
        caughtPokemon3.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox3.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon3.size(); j++){
            
            Pokemoncombobox3.addItem(caughtPokemon3.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
}
    else if(cBall!=null)
    {
        if(cBall.getName()=="GreatBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll-1 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon3.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox3.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
 if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon3.size(); j++){
            
            Pokemoncombobox3.addItem(caughtPokemon3.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
        else if(cBall.getName()=="UltraBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon3.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox3.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon3.size(); j++){
            
            Pokemoncombobox3.addItem(caughtPokemon3.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
            
         }
      
    }
            }
        }
        else if(cBall.getName()=="MasterBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+3 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+4 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon3.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox3.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon3.size(); j++){
            
            Pokemoncombobox3.addItem(caughtPokemon3.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
            
        
    }
    


} 
      if(caughtFlag==0)
              JOptionPane.showMessageDialog(rootPane, "Oh no! " + p.getName()+ " broke free!", ":( ", WIDTH);

      cBall=null;
    }                                               
    if(caughtFlag==1)
   {
       {
        for(int i=0; i<caughtPokemon3.size(); i++)
        {
            if(caughtPokemon3.get(i).getFirstPrevo()!=null)
            {
                for(int j=0; j<caughtPokemon3.size(); j++)
                {
                    if(caughtPokemon3.get(i).getFirstPrevo()==caughtPokemon3.get(j).getName())
                    {
                        if(caughtPokemon3.get(i).getSecondPrevo()==null)
                        {
                            caughtPokemon3.get(i).setAttack(caughtPokemon3.get(i).getAttack() +3);
                                                        JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon3.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                        }
                        else if(caughtPokemon3.get(i).getSecondPrevo()!=null)
                        {
                            for(int x=0; x<caughtPokemon3.size(); x++)
                            {
                                if(caughtPokemon3.get(i).getSecondPrevo()==caughtPokemon3.get(x).getName())
                                {
                                    caughtPokemon3.get(i).setAttack(caughtPokemon3.get(i).getAttack() +5);
                                                                JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon3.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                                }
                            }
                        }
                    }
                }
                
            
        
        
    }
        }
    }

   }

    }//GEN-LAST:event_CatchDieButton3ActionPerformed

    private void DrawDecisionButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawDecisionButton3ActionPerformed
 

        
Card c=Card.decisionArray.get(0);
Card.decisionArray.add(c);
Card.decisionArray.remove(0);

       
              new ShowCardFrame(c.getName()).setVisible(true);
              int f=0;
            if(c.getName()=="PokeCenter"){
                for(int i=0; i<caughtPokemon3.size(); i++){
                    if(!caughtPokemon3.get(i).isAlive()){
                        f=1;
                    }
                        
                }
                if(f==1)
                {
                    new PokeCenterFrame(3).setVisible(true);;
                }
                else{
                                    JOptionPane.showMessageDialog(rootPane, "You have no fainted Pokemon! ", ":) ", WIDTH);

                }
            
            }else if(c.getName()=="Trade")
            {
                new TradeFrame(3).setVisible(true);
            }else if(c.getName()=="KartaTyxis")
            {
                new KartaTyxisFrame(3).setVisible(true);
            }else if(c.getName()=="Battle"){ boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon3.size();i++){
            if(PlayerFrame.caughtPokemon3.get(i).isAlive()){
                new ChallengeFrame(3).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }
            }
                }//GEN-LAST:event_DrawDecisionButton3ActionPerformed

    private void DrawObjectButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawObjectButton3ActionPerformed

        Card c=Card.objectArray.get(0);
Card.objectArray.add(c);
Card.objectArray.remove(0);
objectCard3.add(c);
        Cardcombobox3.removeAllItems();
        for(int j=0; j<objectCard3.size(); j++){
            
            Cardcombobox3.addItem(objectCard3.get(j).getName());
            
        }
     /*
        new ShowCardFrame(c.getName()).setVisible(true);    }//GEN-LAST:event_DrawObjectButton3ActionPerformed
 */
     new ShowCardFrame(c.getName()).setVisible(true);       
    if(objectCard3.size()>7){
            JOptionPane.showMessageDialog(rootPane, "You have more than 7 cards! Use or discard some ", "Attention!! ", WIDTH);
            
        
}
    }
    
    private void ShowCardButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowCardButton4ActionPerformed
 if((String) Cardcombobox4.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No card chosen! ", "Error! ", WIDTH);

        }
         else{
        new ShowCardFrame((String) Cardcombobox4.getSelectedItem()).setVisible(true);
         }    }//GEN-LAST:event_ShowCardButton4ActionPerformed

    private void ShowPokemonButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPokemonButton4ActionPerformed
if((String) Pokemoncombobox4.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No pokemon chosen! ", "Error! ", WIDTH);

        }
         else{

        new ShowPokemonFrame((String) Pokemoncombobox4.getSelectedItem(),4).setVisible(true);
        
 }    }//GEN-LAST:event_ShowPokemonButton4ActionPerformed

    private void WalkDieButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalkDieButton4ActionPerformed
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 
 Toolkit tk = Toolkit.getDefaultToolkit();
    Dimension d = tk.getScreenSize();
    Insets scnMax = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
int taskBarSize = scnMax.bottom;

  JScrollBar vertical = jScrollPane1.getVerticalScrollBar();
  vertical.setValue(TabloFrame.jLabel4.getY()-(d.height-taskBarSize)/2);
  
  JScrollBar horizontal = jScrollPane1.getHorizontalScrollBar();
   horizontal.setValue(TabloFrame.jLabel4.getX()-500);
   /*
 WalkDieLabel4.setText(zaria);    }//GEN-LAST:event_WalkDieButton4ActionPerformed
*/
   
   WalkDieLabel4.setText(zaria);   
  for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}  
   
   
    }
    private void BattleDieButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleDieButton4ActionPerformed
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 
 if(BattleFrame.playerNumber==4)
    rollLabel1.setText(zaria);
 if(BattleFrame.battleWithPlayer==4)
rollLabel2.setText(zaria); 
 
 boolean timeFlag1=false;
 for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
    timeFlag1=true;
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, " TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}
 
 if(!timeFlag1)
 {
 
if(BattleFrame.playerNumber==4)
    BattleFrame.setRollLabel(zaria);
 if(BattleFrame.battleWithPlayer==4)
     BattleFrame.setRollLabel2(zaria);
 }
 /*
 
  BattleDieLabel4.setText(zaria);    }//GEN-LAST:event_BattleDieButton4ActionPerformed
*/}
    
    private void CatchDieButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CatchDieButton4ActionPerformed
  int caughtFlag=0;
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
  CatchDieLabel4.setText(zaria);
  
   boolean timeFlag=false;
for(int i=0; i< PlayerFrame.objectCard1.size(); i++){
    if( PlayerFrame.objectCard1.get(i).getName()=="TimeMachine"){        
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard1.remove(i);
     PlayerFrame.Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }

for(int i=0; i< PlayerFrame.objectCard2.size(); i++){
    if( PlayerFrame.objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard2.remove(i);
     PlayerFrame.Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }
if( PlayerFrame.numberOfPlayers>=3){
for(int i=0; i< PlayerFrame.objectCard3.size(); i++){
    if( PlayerFrame.objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard3.remove(i);
     PlayerFrame.Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=4){
for(int i=0; i< PlayerFrame.objectCard4.size(); i++){
    if( PlayerFrame.objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard4.remove(i);
     PlayerFrame.Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=5){
for(int i=0; i< PlayerFrame.objectCard5.size(); i++){
    if( PlayerFrame.objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard5.remove(i);
     PlayerFrame.Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=6){
for(int i=0; i< PlayerFrame.objectCard6.size(); i++){
    if( PlayerFrame.objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard6.remove(i);
     PlayerFrame.Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

 
  
   
   
   
   if(!timeFlag){
   
      for(int i=0;i<PokemonTapaFrame.p.getDice().length;i++)
{
    if(PokemonTapaFrame.p.dice[i]==roll && !caughtPokemon.contains(PokemonTapaFrame.p)){
        
        caughtPokemon4.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox4.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon4.size(); j++){
            
            Pokemoncombobox4.addItem(caughtPokemon4.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
}
    else if(cBall!=null)
    {
        if(cBall.getName()=="GreatBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll-1 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon4.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox4.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
 if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon4.size(); j++){
            
            Pokemoncombobox4.addItem(caughtPokemon4.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
        else if(cBall.getName()=="UltraBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon4.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox4.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon4.size(); j++){
            
            Pokemoncombobox4.addItem(caughtPokemon4.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
            
         }
      
    }
            }
        }
        else if(cBall.getName()=="MasterBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+3 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+4 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon4.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox4.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon4.size(); j++){
            
            Pokemoncombobox4.addItem(caughtPokemon4.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
            
        
    }
    


} 
      if(caughtFlag==0)
              JOptionPane.showMessageDialog(rootPane, "Oh no! " + p.getName()+ " broke free!", ":( ", WIDTH);

      cBall=null;
    }                                               
    if(caughtFlag==1)
   {
       {
        for(int i=0; i<caughtPokemon4.size(); i++)
        {
            if(caughtPokemon4.get(i).getFirstPrevo()!=null)
            {
                for(int j=0; j<caughtPokemon4.size(); j++)
                {
                    if(caughtPokemon4.get(i).getFirstPrevo()==caughtPokemon4.get(j).getName())
                    {
                        if(caughtPokemon4.get(i).getSecondPrevo()==null)
                        {
                            caughtPokemon4.get(i).setAttack(caughtPokemon4.get(i).getAttack() +3);
                                                        JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon4.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                        }
                        else if(caughtPokemon4.get(i).getSecondPrevo()!=null)
                        {
                            for(int x=0; x<caughtPokemon4.size(); x++)
                            {
                                if(caughtPokemon4.get(i).getSecondPrevo()==caughtPokemon4.get(x).getName())
                                {
                                    caughtPokemon4.get(i).setAttack(caughtPokemon4.get(i).getAttack() +5);
                                                                JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon4.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                                }
                            }
                        }
                    }
                }
                
            
        
        
    }
        }
    }

   }

    }//GEN-LAST:event_CatchDieButton4ActionPerformed

    private void DrawDecisionButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawDecisionButton4ActionPerformed
 

        
Card c=Card.decisionArray.get(0);
Card.decisionArray.add(c);
Card.decisionArray.remove(0);

       
              new ShowCardFrame(c.getName()).setVisible(true);
              int f=0;
            if(c.getName()=="PokeCenter"){
                for(int i=0; i<caughtPokemon4.size(); i++){
                    if(!caughtPokemon4.get(i).isAlive()){
                        f=1;
                    }
                        
                }
                if(f==1)
                {
                    new PokeCenterFrame(4).setVisible(true);
                }
                else{
                                    JOptionPane.showMessageDialog(rootPane, "You have no fainted Pokemon! ", ":) ", WIDTH);

                }
            
            }else if(c.getName()=="Trade")
            {
                new TradeFrame(4).setVisible(true);
            }else if(c.getName()=="KartaTyxis")
            {
                new KartaTyxisFrame(4).setVisible(true);
            }else if(c.getName()=="Battle"){ boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon4.size();i++){
            if(PlayerFrame.caughtPokemon4.get(i).isAlive()){
                new ChallengeFrame(4).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }
            }
                }//GEN-LAST:event_DrawDecisionButton4ActionPerformed

    private void DrawObjectButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawObjectButton4ActionPerformed

        Card c=Card.objectArray.get(0);
Card.objectArray.add(c);
Card.objectArray.remove(0);
objectCard4.add(c);
        Cardcombobox4.removeAllItems();
        for(int j=0; j<objectCard4.size(); j++){
            
            Cardcombobox4.addItem(objectCard4.get(j).getName());
            
        }
     /*
        new ShowCardFrame(c.getName()).setVisible(true);    }//GEN-LAST:event_DrawObjectButton4ActionPerformed
*/
         new ShowCardFrame(c.getName()).setVisible(true);       
    if(objectCard4.size()>7){
            JOptionPane.showMessageDialog(rootPane, "You have more than 7 cards! Use or discard some ", "Attention!! ", WIDTH);
            
        
}
    }

    private void ShowCardButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowCardButton5ActionPerformed
 if((String) Cardcombobox5.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No card chosen! ", "Error! ", WIDTH);

        }
         else{
        new ShowCardFrame((String) Cardcombobox5.getSelectedItem()).setVisible(true);
         }    }//GEN-LAST:event_ShowCardButton5ActionPerformed

    private void ShowPokemonButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPokemonButton5ActionPerformed
if((String) Pokemoncombobox5.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No pokemon chosen! ", "Error! ", WIDTH);

        }
         else{

        new ShowPokemonFrame((String) Pokemoncombobox5.getSelectedItem(),5).setVisible(true);
        
 }    }//GEN-LAST:event_ShowPokemonButton5ActionPerformed

    private void WalkDieButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalkDieButton5ActionPerformed
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 Toolkit tk = Toolkit.getDefaultToolkit();
    Dimension d = tk.getScreenSize();
    Insets scnMax = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
int taskBarSize = scnMax.bottom;

  JScrollBar vertical = jScrollPane1.getVerticalScrollBar();
  vertical.setValue(TabloFrame.jLabel5.getY()-(d.height-taskBarSize)/2);
  
  JScrollBar horizontal = jScrollPane1.getHorizontalScrollBar();
   horizontal.setValue(TabloFrame.jLabel5.getX()-500);
   /*
 WalkDieLabel5.setText(zaria);    }//GEN-LAST:event_WalkDieButton5ActionPerformed
*/
    WalkDieLabel5.setText(zaria);   
  for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}  
   
   
    }
   
   
    private void BattleDieButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleDieButton5ActionPerformed
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 
 if(BattleFrame.playerNumber==5)
    rollLabel1.setText(zaria);
 if(BattleFrame.battleWithPlayer==5)
rollLabel2.setText(zaria); 
 
 boolean timeFlag1=false;
 for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
    timeFlag1=true;
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, " TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
      
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
        
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}
 
 if(!timeFlag1)
 {
 
if(BattleFrame.playerNumber==5)
    BattleFrame.setRollLabel(zaria);
 if(BattleFrame.battleWithPlayer==5)
     BattleFrame.setRollLabel2(zaria);
 }
 /*
  BattleDieLabel5.setText(zaria);    }//GEN-LAST:event_BattleDieButton5ActionPerformed
*/ }
    private void CatchDieButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CatchDieButton5ActionPerformed
   int caughtFlag=0;
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
  CatchDieLabel5.setText(zaria);
  
   boolean timeFlag=false;
for(int i=0; i< PlayerFrame.objectCard1.size(); i++){
    if( PlayerFrame.objectCard1.get(i).getName()=="TimeMachine"){        
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard1.remove(i);
     PlayerFrame.Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }

for(int i=0; i< PlayerFrame.objectCard2.size(); i++){
    if( PlayerFrame.objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard2.remove(i);
     PlayerFrame.Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }
if( PlayerFrame.numberOfPlayers>=3){
for(int i=0; i< PlayerFrame.objectCard3.size(); i++){
    if( PlayerFrame.objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard3.remove(i);
     PlayerFrame.Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=4){
for(int i=0; i< PlayerFrame.objectCard4.size(); i++){
    if( PlayerFrame.objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard4.remove(i);
     PlayerFrame.Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=5){
for(int i=0; i< PlayerFrame.objectCard5.size(); i++){
    if( PlayerFrame.objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard5.remove(i);
     PlayerFrame.Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=6){
for(int i=0; i< PlayerFrame.objectCard6.size(); i++){
    if( PlayerFrame.objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard6.remove(i);
     PlayerFrame.Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

 
  
   
   
   
   if(!timeFlag){
   
      for(int i=0;i<PokemonTapaFrame.p.getDice().length;i++)
{
    if(PokemonTapaFrame.p.dice[i]==roll && !caughtPokemon.contains(PokemonTapaFrame.p)){
        
        caughtPokemon5.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox5.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon5.size(); j++){
            
            Pokemoncombobox5.addItem(caughtPokemon5.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
}
    else if(cBall!=null)
    {
        if(cBall.getName()=="GreatBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll-1 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon5.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox5.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
 if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon5.size(); j++){
            
            Pokemoncombobox5.addItem(caughtPokemon5.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
        else if(cBall.getName()=="UltraBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon5.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox5.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon5.size(); j++){
            
            Pokemoncombobox5.addItem(caughtPokemon5.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
            
         }
      
    }
            }
        }
        else if(cBall.getName()=="MasterBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+3 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+4 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon5.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox5.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon5.size(); j++){
            
            Pokemoncombobox5.addItem(caughtPokemon5.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
            
        
    }
    


} 
      if(caughtFlag==0)
              JOptionPane.showMessageDialog(rootPane, "Oh no! " + p.getName()+ " broke free!", ":( ", WIDTH);

      cBall=null;
    }                                               
    if(caughtFlag==1)
   {
       {
        for(int i=0; i<caughtPokemon5.size(); i++)
        {
            if(caughtPokemon5.get(i).getFirstPrevo()!=null)
            {
                for(int j=0; j<caughtPokemon5.size(); j++)
                {
                    if(caughtPokemon5.get(i).getFirstPrevo()==caughtPokemon5.get(j).getName())
                    {
                        if(caughtPokemon5.get(i).getSecondPrevo()==null)
                        {
                            caughtPokemon5.get(i).setAttack(caughtPokemon5.get(i).getAttack() +3);
                                                        JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon5.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                        }
                        else if(caughtPokemon5.get(i).getSecondPrevo()!=null)
                        {
                            for(int x=0; x<caughtPokemon5.size(); x++)
                            {
                                if(caughtPokemon5.get(i).getSecondPrevo()==caughtPokemon5.get(x).getName())
                                {
                                    caughtPokemon5.get(i).setAttack(caughtPokemon5.get(i).getAttack() +5);
                                                                JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon5.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                                }
                            }
                        }
                    }
                }
                
            
        
        
    }
        }
    }

   }
    }//GEN-LAST:event_CatchDieButton5ActionPerformed


    private void DrawDecisionButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawDecisionButton5ActionPerformed
 
        
Card c=Card.decisionArray.get(0);
Card.decisionArray.add(c);
Card.decisionArray.remove(0);

       
              new ShowCardFrame(c.getName()).setVisible(true);
              int f=0;
            if(c.getName()=="PokeCenter"){
                for(int i=0; i<caughtPokemon5.size(); i++){
                    if(!caughtPokemon5.get(i).isAlive()){
                        f=1;
                    }
                        
                }
                if(f==1)
                {
                    new PokeCenterFrame(5).setVisible(true);
                }
                else{
                                    JOptionPane.showMessageDialog(rootPane, "You have no fainted Pokemon! ", ":) ", WIDTH);

                }
            
            }else if(c.getName()=="Trade")
            {
                new TradeFrame(5).setVisible(true);
            }else if(c.getName()=="KartaTyxis")
            {
                new KartaTyxisFrame(5).setVisible(true);
            }else if(c.getName()=="Battle"){ boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon5.size();i++){
            if(PlayerFrame.caughtPokemon5.get(i).isAlive()){
                new ChallengeFrame(5).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }
            }
                }//GEN-LAST:event_DrawDecisionButton5ActionPerformed

    private void DrawObjectButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawObjectButton5ActionPerformed

        Card c=Card.objectArray.get(0);
Card.objectArray.add(c);
Card.objectArray.remove(0);
objectCard5.add(c);
        Cardcombobox5.removeAllItems();
        for(int j=0; j<objectCard5.size(); j++){
            
            Cardcombobox5.addItem(objectCard5.get(j).getName());
            
        }
     /*
        new ShowCardFrame(c.getName()).setVisible(true);    }//GEN-LAST:event_DrawObjectButton5ActionPerformed
*/
         new ShowCardFrame(c.getName()).setVisible(true);       
    if(objectCard5.size()>7){
            JOptionPane.showMessageDialog(rootPane, "You have more than 7 cards! Use or discard some ", "Attention!! ", WIDTH);
            
        
}
    }

    private void ShowCardButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowCardButton6ActionPerformed
 if((String) Cardcombobox6.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No card chosen! ", "Error! ", WIDTH);

        }
         else{
        new ShowCardFrame((String) Cardcombobox6.getSelectedItem()).setVisible(true);
         }    }//GEN-LAST:event_ShowCardButton6ActionPerformed

    private void ShowPokemonButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPokemonButton6ActionPerformed
if((String) Pokemoncombobox6.getSelectedItem()==null)
        {
                        JOptionPane.showMessageDialog(rootPane, "No pokemon chosen! ", "Error! ", WIDTH);

        }
         else{

        new ShowPokemonFrame((String) Pokemoncombobox6.getSelectedItem(),6).setVisible(true);
        
 }    }//GEN-LAST:event_ShowPokemonButton6ActionPerformed

    private void WalkDieButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalkDieButton6ActionPerformed
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 
 
 Toolkit tk = Toolkit.getDefaultToolkit();
    Dimension d = tk.getScreenSize();
    Insets scnMax = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
int taskBarSize = scnMax.bottom;

  JScrollBar vertical = jScrollPane1.getVerticalScrollBar();
  vertical.setValue(TabloFrame.jLabel6.getY()-(d.height-taskBarSize)/2);
  
  JScrollBar horizontal = jScrollPane1.getHorizontalScrollBar();
   horizontal.setValue(TabloFrame.jLabel6.getX()-500);
   /*
 WalkDieLabel6.setText(zaria);    }//GEN-LAST:event_WalkDieButton6ActionPerformed
*/
    WalkDieLabel6.setText(zaria);   
  for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}
       
}
    }}  
   
   
    }
   
   
    private void BattleDieButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleDieButton6ActionPerformed
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
 
 if(BattleFrame.playerNumber==6)
    rollLabel1.setText(zaria);
 if(BattleFrame.battleWithPlayer==6)
rollLabel2.setText(zaria); 
 
 
 boolean timeFlag1=false;
 for(int i=0; i<objectCard1.size(); i++){
    if(objectCard1.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard1.remove(i);
    Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
    timeFlag1=true;
}
       
}
    }

for(int i=0; i<objectCard2.size(); i++){
    if(objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard2.remove(i);
    Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }
if(numberOfPlayers>=3){
for(int i=0; i<objectCard3.size(); i++){
    if(objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard3.remove(i);
    Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=4){
for(int i=0; i<objectCard4.size(); i++){
    if(objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard4.remove(i);
    Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=5){
for(int i=0; i<objectCard5.size(); i++){
    if(objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard5.remove(i);
    Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}

if(numberOfPlayers>=6){
for(int i=0; i<objectCard6.size(); i++){
    if(objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to use your TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    objectCard6.remove(i);
    Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
        timeFlag1=true;

}
       
}
    }}
 
 if(!timeFlag1)
 {
 
 if(BattleFrame.playerNumber==6)
    BattleFrame.setRollLabel(zaria);
 if(BattleFrame.battleWithPlayer==6)
     BattleFrame.setRollLabel2(zaria);
 }
 /*
  BattleDieLabel6.setText(zaria);    }//GEN-LAST:event_BattleDieButton6ActionPerformed
*/}
    
    private void CatchDieButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CatchDieButton6ActionPerformed
 int caughtFlag=0;
Random diceRoller = new Random();
       int roll = diceRoller.nextInt(6) + 1;
 
 String zaria = Integer.toString(roll);
  CatchDieLabel6.setText(zaria);
  
   boolean timeFlag=false;
for(int i=0; i< PlayerFrame.objectCard1.size(); i++){
    if( PlayerFrame.objectCard1.get(i).getName()=="TimeMachine"){        
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 1 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard1.remove(i);
     PlayerFrame.Cardcombobox1.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }

for(int i=0; i< PlayerFrame.objectCard2.size(); i++){
    if( PlayerFrame.objectCard2.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 2 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard2.remove(i);
     PlayerFrame.Cardcombobox2.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }
if( PlayerFrame.numberOfPlayers>=3){
for(int i=0; i< PlayerFrame.objectCard3.size(); i++){
    if( PlayerFrame.objectCard3.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 3 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard3.remove(i);
     PlayerFrame.Cardcombobox3.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=4){
for(int i=0; i< PlayerFrame.objectCard4.size(); i++){
    if( PlayerFrame.objectCard4.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 4 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard4.remove(i);
     PlayerFrame.Cardcombobox4.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=5){
for(int i=0; i< PlayerFrame.objectCard5.size(); i++){
    if( PlayerFrame.objectCard5.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 5 use his TimeMachine Card??");
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
     PlayerFrame.objectCard5.remove(i);
     PlayerFrame.Cardcombobox5.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

if( PlayerFrame.numberOfPlayers>=6){
for(int i=0; i< PlayerFrame.objectCard6.size(); i++){
    if( PlayerFrame.objectCard6.get(i).getName()=="TimeMachine"){
        int dialogResult = JOptionPane.showConfirmDialog(this, "Will Player 6 use his TimeMachine Card??");
        
if(dialogResult == JOptionPane.YES_OPTION){
    timeFlag=true;
    PlayerFrame.objectCard6.remove(i);
     PlayerFrame.Cardcombobox6.removeItem("TimeMachine");
    JOptionPane.showMessageDialog(rootPane, "TimeMachine card has been used. Please roll again!", null, WIDTH);
}break;
       
}
    }}

 
  
   
   
   
   if(!timeFlag){
   
      for(int i=0;i<PokemonTapaFrame.p.getDice().length;i++)
{
    if(PokemonTapaFrame.p.dice[i]==roll && !caughtPokemon.contains(PokemonTapaFrame.p)){
        
        caughtPokemon6.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox6.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon6.size(); j++){
            
            Pokemoncombobox6.addItem(caughtPokemon6.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
}
    else if(cBall!=null)
    {
        if(cBall.getName()=="GreatBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll-1 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon6.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox6.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
 if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon6.size(); j++){
            
            Pokemoncombobox6.addItem(caughtPokemon6.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
        else if(cBall.getName()=="UltraBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon6.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox6.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon6.size(); j++){
            
            Pokemoncombobox6.addItem(caughtPokemon6.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
            
         }
      
    }
            }
        }
        else if(cBall.getName()=="MasterBall"){
            if((PokemonTapaFrame.p.dice[i]==roll+1 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+2 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+3 && !caughtPokemon.contains(PokemonTapaFrame.p))||(PokemonTapaFrame.p.dice[i]==roll+4 && !caughtPokemon.contains(PokemonTapaFrame.p)))
            {
                caughtPokemon6.add(PokemonTapaFrame.p);
        caughtPokemon.add(PokemonTapaFrame.p);
        Pokemoncombobox6.removeAllItems();
                                                JOptionPane.showMessageDialog(rootPane, "Gotcha! " + p.getName()+ " was caught!", ":D ", WIDTH);
caughtFlag=1;
if(PokemonTapaFrame.p.getColor()=="yellow")
    Pokemon.yellowArray.remove(PokemonTapaFrame.p);
        for(int j=0; j<caughtPokemon6.size(); j++){
            
            Pokemoncombobox6.addItem(caughtPokemon6.get(j).getName());
            PokemonTapaFrame.toBeCaught.remove(p);

                    
                 
            
        }
        for(int j=0; j<TabloFrame.labelList.size(); j++){
         if(TabloFrame.labelList.get(j).getText()==PokemonTapaFrame.p.getName()){
             TabloFrame.labelList.get(j).setText(null);
            TabloFrame.labelList.get(j).setOpaque(false);
         }
      
    }
            }
        }
            
        
    }
    


} 
      if(caughtFlag==0)
              JOptionPane.showMessageDialog(rootPane, "Oh no! " + p.getName()+ " broke free!", ":( ", WIDTH);

      cBall=null;
    }        
   if(caughtFlag==1)
   {
       {
        for(int i=0; i<caughtPokemon6.size(); i++)
        {
            if(caughtPokemon6.get(i).getFirstPrevo()!=null)
            {
                for(int j=0; j<caughtPokemon6.size(); j++)
                {
                    if(caughtPokemon6.get(i).getFirstPrevo()==caughtPokemon6.get(j).getName())
                    {
                        if(caughtPokemon6.get(i).getSecondPrevo()==null)
                        {
                            caughtPokemon6.get(i).setAttack(caughtPokemon6.get(i).getAttack() +3);
                                                        JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon6.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                        }
                        else if(caughtPokemon6.get(i).getSecondPrevo()!=null)
                        {
                            for(int x=0; x<caughtPokemon6.size(); x++)
                            {
                                if(caughtPokemon6.get(i).getSecondPrevo()==caughtPokemon6.get(x).getName())
                                {
                                    caughtPokemon6.get(i).setAttack(caughtPokemon6.get(i).getAttack() +5);
                                                                JOptionPane.showMessageDialog(rootPane, "Your "+caughtPokemon6.get(i).getName()+" gained an evolution attack Bonus!!!", "WOW", WIDTH);

                                }
                            }
                        }
                    }
                }
                
            
        
        
    }
        }
    }

   }

    }//GEN-LAST:event_CatchDieButton6ActionPerformed

    private void DrawDecisionButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawDecisionButton6ActionPerformed
 
Card c=Card.decisionArray.get(0);
Card.decisionArray.add(c);
Card.decisionArray.remove(0);

       
              new ShowCardFrame(c.getName()).setVisible(true);
              int f=0;
            if(c.getName()=="PokeCenter"){
                for(int i=0; i<caughtPokemon6.size(); i++){
                    if(!caughtPokemon6.get(i).isAlive()){
                        f=1;
                    }
                        
                }
                if(f==1)
                {
                    new PokeCenterFrame(6).setVisible(true);
                }
                else{
                                    JOptionPane.showMessageDialog(rootPane, "You have no fainted Pokemon! ", ":) ", WIDTH);

                }
            
            }else if(c.getName()=="Trade")
            {
                new TradeFrame(6).setVisible(true);
            }else if(c.getName()=="KartaTyxis")
            {
                new KartaTyxisFrame(6).setVisible(true);
            }else if(c.getName()=="Battle"){ boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon6.size();i++){
            if(PlayerFrame.caughtPokemon6.get(i).isAlive()){
                new ChallengeFrame(6).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }
            }
                }//GEN-LAST:event_DrawDecisionButton6ActionPerformed

    private void DrawObjectButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawObjectButton6ActionPerformed

        Card c=Card.objectArray.get(0);
Card.objectArray.add(c);
Card.objectArray.remove(0);
objectCard6.add(c);
        Cardcombobox6.removeAllItems();
        for(int j=0; j<objectCard6.size(); j++){
            
            Cardcombobox6.addItem(objectCard6.get(j).getName());
            
        }
     /*
        new ShowCardFrame(c.getName()).setVisible(true);    }//GEN-LAST:event_DrawObjectButton6ActionPerformed
*/
         new ShowCardFrame(c.getName()).setVisible(true);       
    if(objectCard6.size()>7){
            JOptionPane.showMessageDialog(rootPane, "You have more than 7 cards! Use or discard some ", "Attention!! ", WIDTH);
            
        
}
    }



    private void TradeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TradeButton1ActionPerformed
        new TradeFrame(1).setVisible(true);
    }//GEN-LAST:event_TradeButton1ActionPerformed

    private void TradeButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TradeButton2ActionPerformed
        new TradeFrame(2).setVisible(true);
    }//GEN-LAST:event_TradeButton2ActionPerformed

    private void TradeButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TradeButton4ActionPerformed
      new TradeFrame(4).setVisible(true);
    }//GEN-LAST:event_TradeButton4ActionPerformed

    private void TradeButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TradeButton3ActionPerformed
      new TradeFrame(3).setVisible(true);    }//GEN-LAST:event_TradeButton3ActionPerformed

    private void TradeButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TradeButton5ActionPerformed
      new TradeFrame(5).setVisible(true);    }//GEN-LAST:event_TradeButton5ActionPerformed

    private void TradeButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TradeButton6ActionPerformed
      new TradeFrame(6).setVisible(true);    }//GEN-LAST:event_TradeButton6ActionPerformed

    private void UseCardButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseCardButton1ActionPerformed

        if(Cardcombobox1.getSelectedItem()=="Petagma"){
                            JOptionPane.showMessageDialog(rootPane, "Fly to a city or town you want ", "FLY! ", WIDTH);
                              for(int i=0; i<objectCard1.size(); i++){
                if(Cardcombobox1.getSelectedItem()==objectCard1.get(i).getName())
                {
                     
                     objectCard1.remove(objectCard1.remove(i));
                     Cardcombobox1.removeItem(Cardcombobox1.getSelectedItem());
                }
            }
                           
                            
        }
        else if(Cardcombobox1.getSelectedItem()=="MagikoFiltro"){
            for(int i=0; i<caughtPokemon1.size(); i++)
                caughtPokemon1.get(i).setAlive(true);
                            for(int i=0; i<objectCard1.size(); i++){
                if(Cardcombobox1.getSelectedItem()==objectCard1.get(i).getName())
                {
                     
                     objectCard1.remove(objectCard1.remove(i));
                     Cardcombobox1.removeItem(Cardcombobox1.getSelectedItem());
                }
            }
                                          JOptionPane.showMessageDialog(rootPane, "All your Pokemon are healed! ", "YAY! ", WIDTH);
              
        }
        else if(Cardcombobox1.getSelectedItem()=="GreatBall"||Cardcombobox1.getSelectedItem()=="UltraBall"||Cardcombobox1.getSelectedItem()=="MasterBall" )
        {
            for(int i=0; i<objectCard1.size(); i++){
                if(Cardcombobox1.getSelectedItem()==objectCard1.get(i).getName())
                {
                     cBall=objectCard1.get(i);
                     objectCard1.remove(objectCard1.remove(i));
                     Cardcombobox1.removeItem(Cardcombobox1.getSelectedItem());
                }
            }
        }
    }//GEN-LAST:event_UseCardButton1ActionPerformed

    private void UseCardButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseCardButton2ActionPerformed

        if(Cardcombobox2.getSelectedItem()=="Petagma"){
                            JOptionPane.showMessageDialog(rootPane, "Fly to a city or town you want ", "FLY! ", WIDTH);
                                           for(int i=0; i<objectCard2.size(); i++){
                if(Cardcombobox2.getSelectedItem()==objectCard2.get(i).getName())
                {
                     
                     objectCard2.remove(objectCard2.remove(i));
                     Cardcombobox2.removeItem(Cardcombobox2.getSelectedItem());
                }
            }
        }
        else if(Cardcombobox2.getSelectedItem()=="MagikoFiltro"){
            for(int i=0; i<caughtPokemon2.size(); i++)
                caughtPokemon2.get(i).setAlive(true);
                            for(int i=0; i<objectCard2.size(); i++){
                if(Cardcombobox2.getSelectedItem()==objectCard2.get(i).getName())
                {
                     
                     objectCard2.remove(objectCard2.remove(i));
                     Cardcombobox2.removeItem(Cardcombobox2.getSelectedItem());
                }
            }
                                                                      JOptionPane.showMessageDialog(rootPane, "All your Pokemon are healed! ", "YAY! ", WIDTH);

        }
        
        
        else if(Cardcombobox2.getSelectedItem()=="GreatBall"||Cardcombobox2.getSelectedItem()=="UltraBall"||Cardcombobox2.getSelectedItem()=="MasterBall" )
        {
            for(int i=0; i<objectCard2.size(); i++){
                if(Cardcombobox2.getSelectedItem()==objectCard2.get(i).getName())
                {
                     cBall=objectCard2.get(i);
                     objectCard2.remove(objectCard2.remove(i));
                     Cardcombobox2.removeItem(Cardcombobox2.getSelectedItem());
                }
            }
        

        }    }//GEN-LAST:event_UseCardButton2ActionPerformed

    private void UseCardButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseCardButton3ActionPerformed

        if(Cardcombobox3.getSelectedItem()=="Petagma"){
                            JOptionPane.showMessageDialog(rootPane, "Fly to a city or town you want ", "FLY! ", WIDTH);
                                         for(int i=0; i<objectCard3.size(); i++){
                if(Cardcombobox3.getSelectedItem()==objectCard3.get(i).getName())
                {
                     
                     objectCard3.remove(objectCard3.remove(i));
                     Cardcombobox3.removeItem(Cardcombobox3.getSelectedItem());
                }
            }
        }
        else if(Cardcombobox3.getSelectedItem()=="MagikoFiltro"){
            for(int i=0; i<caughtPokemon3.size(); i++)
                caughtPokemon3.get(i).setAlive(true);
                           for(int i=0; i<objectCard3.size(); i++){
                if(Cardcombobox3.getSelectedItem()==objectCard3.get(i).getName())
                {
                     
                     objectCard3.remove(objectCard3.remove(i));
                     Cardcombobox3.removeItem(Cardcombobox3.getSelectedItem());
                }
            }
                                                                     JOptionPane.showMessageDialog(rootPane, "All your Pokemon are healed! ", "YAY! ", WIDTH);

        }
        else if(Cardcombobox3.getSelectedItem()=="GreatBall"||Cardcombobox3.getSelectedItem()=="UltraBall"||Cardcombobox3.getSelectedItem()=="MasterBall" )
        {
            for(int i=0; i<objectCard3.size(); i++){
                if(Cardcombobox3.getSelectedItem()==objectCard3.get(i).getName())
                {
                     cBall=objectCard3.get(i);
                     objectCard3.remove(objectCard3.remove(i));
                     Cardcombobox3.removeItem(Cardcombobox3.getSelectedItem());
                }
            }

        }    }//GEN-LAST:event_UseCardButton3ActionPerformed

    private void UseCardButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseCardButton4ActionPerformed

        if(Cardcombobox4.getSelectedItem()=="Petagma"){
                            JOptionPane.showMessageDialog(rootPane, "Fly to a city or town you want ", "FLY! ", WIDTH);
                                           for(int i=0; i<objectCard4.size(); i++){
                if(Cardcombobox4.getSelectedItem()==objectCard4.get(i).getName())
                {
                     
                     objectCard4.remove(objectCard4.remove(i));
                     Cardcombobox4.removeItem(Cardcombobox4.getSelectedItem());
                }
            }

        }
        else if(Cardcombobox4.getSelectedItem()=="MagikoFiltro"){
            for(int i=0; i<caughtPokemon4.size(); i++)
                caughtPokemon4.get(i).setAlive(true);
                                          for(int i=0; i<objectCard4.size(); i++){
                if(Cardcombobox4.getSelectedItem()==objectCard4.get(i).getName())
                {
                     
                     objectCard4.remove(objectCard4.remove(i));
                     Cardcombobox4.removeItem(Cardcombobox4.getSelectedItem());
                }
            }
                                                                                            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are healed! ", "YAY! ", WIDTH);
                                   
        }
        else if(Cardcombobox4.getSelectedItem()=="GreatBall"||Cardcombobox4.getSelectedItem()=="UltraBall"||Cardcombobox4.getSelectedItem()=="MasterBall" )
        {
            for(int i=0; i<objectCard4.size(); i++){
                if(Cardcombobox4.getSelectedItem()==objectCard4.get(i).getName())
                {
                     cBall=objectCard4.get(i);
                     objectCard4.remove(objectCard4.remove(i));
                     Cardcombobox4.removeItem(Cardcombobox4.getSelectedItem());
                }
            }

        }    }//GEN-LAST:event_UseCardButton4ActionPerformed

    private void UseCardButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseCardButton5ActionPerformed

        if(Cardcombobox5.getSelectedItem()=="Petagma"){
                            JOptionPane.showMessageDialog(rootPane, "Fly to a city or town you want ", "FLY! ", WIDTH);
                                 for(int i=0; i<objectCard5.size(); i++){
                if(Cardcombobox5.getSelectedItem()==objectCard5.get(i).getName())
                {
                     
                     objectCard5.remove(objectCard5.remove(i));
                     Cardcombobox5.removeItem(Cardcombobox5.getSelectedItem());
                }
            }
        }
        else if(Cardcombobox5.getSelectedItem()=="MagikoFiltro"){
            for(int i=0; i<caughtPokemon5.size(); i++)
                caughtPokemon5.get(i).setAlive(true);
                                for(int i=0; i<objectCard5.size(); i++){
                if(Cardcombobox5.getSelectedItem()==objectCard5.get(i).getName())
                {
                     
                     objectCard5.remove(objectCard5.remove(i));
                     Cardcombobox5.removeItem(Cardcombobox5.getSelectedItem());
                }
            }
                                                                          JOptionPane.showMessageDialog(rootPane, "All your Pokemon are healed! ", "YAY! ", WIDTH);

        }
        else if(Cardcombobox5.getSelectedItem()=="GreatBall"||Cardcombobox5.getSelectedItem()=="UltraBall"||Cardcombobox5.getSelectedItem()=="MasterBall" )
        {
            for(int i=0; i<objectCard5.size(); i++){
                if(Cardcombobox5.getSelectedItem()==objectCard5.get(i).getName())
                {
                     cBall=objectCard5.get(i);
                     objectCard5.remove(objectCard5.remove(i));
                     Cardcombobox5.removeItem(Cardcombobox5.getSelectedItem());
                }
            }

        }    }//GEN-LAST:event_UseCardButton5ActionPerformed

    private void UseCardButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseCardButton6ActionPerformed

        if(Cardcombobox6.getSelectedItem()=="Petagma"){
                            JOptionPane.showMessageDialog(rootPane, "Fly to a city or town you want ", "FLY! ", WIDTH);
                                             for(int i=0; i<objectCard6.size(); i++){
                if(Cardcombobox6.getSelectedItem()==objectCard6.get(i).getName())
                {
                     
                     objectCard6.remove(objectCard6.remove(i));
                     Cardcombobox6.removeItem(Cardcombobox6.getSelectedItem());
                }
            }
        }
        else if(Cardcombobox6.getSelectedItem()=="MagikoFiltro"){
            for(int i=0; i<caughtPokemon6.size(); i++)
                caughtPokemon6.get(i).setAlive(true);
                                             for(int i=0; i<objectCard6.size(); i++){
                if(Cardcombobox6.getSelectedItem()==objectCard6.get(i).getName())
                {
                     
                     objectCard6.remove(objectCard6.remove(i));
                     Cardcombobox6.removeItem(Cardcombobox6.getSelectedItem());
                }
            }
                                                                                       JOptionPane.showMessageDialog(rootPane, "All your Pokemon are healed! ", "YAY! ", WIDTH);

        }
        else if(Cardcombobox6.getSelectedItem()=="GreatBall"||Cardcombobox6.getSelectedItem()=="UltraBall"||Cardcombobox6.getSelectedItem()=="MasterBall" )
        {
            for(int i=0; i<objectCard6.size(); i++){
                if(Cardcombobox6.getSelectedItem()==objectCard6.get(i).getName())
                {
                     cBall=objectCard6.get(i);
                     objectCard6.remove(objectCard6.remove(i));
                     Cardcombobox6.removeItem(Cardcombobox6.getSelectedItem());
                }
            }

        }    }//GEN-LAST:event_UseCardButton6ActionPerformed

    private void Pokemoncombobox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pokemoncombobox6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Pokemoncombobox6ActionPerformed

    private void powerpointsButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerpointsButton1ActionPerformed
       int powerpoints=0;
        for(int i=0; i<caughtPokemon1.size(); i++){
            if(caughtPokemon1.get(i).isAlive())
                powerpoints+=caughtPokemon1.get(i).getPower();
        }
         String spowerpoints = Integer.toString(powerpoints);

        powerpointsLabel1.setText(spowerpoints);
    }//GEN-LAST:event_powerpointsButton1ActionPerformed

    private void powerpointsButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerpointsButton2ActionPerformed
   int powerpoints=0;
        for(int i=0; i<caughtPokemon2.size(); i++){
            if(caughtPokemon2.get(i).isAlive())
                powerpoints+=caughtPokemon2.get(i).getPower();
        }
         String spowerpoints = Integer.toString(powerpoints);

        powerpointsLabel2.setText(spowerpoints);        // TODO add your handling code here:
    }//GEN-LAST:event_powerpointsButton2ActionPerformed

    private void powerpointsButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerpointsButton3ActionPerformed
   int powerpoints=0;
        for(int i=0; i<caughtPokemon3.size(); i++){
            if(caughtPokemon3.get(i).isAlive())
                powerpoints+=caughtPokemon3.get(i).getPower();
        }
         String spowerpoints = Integer.toString(powerpoints);

        powerpointsLabel3.setText(spowerpoints);        // TODO add your handling code here:
    }//GEN-LAST:event_powerpointsButton3ActionPerformed

    private void powerpointsButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerpointsButton4ActionPerformed
   int powerpoints=0;
        for(int i=0; i<caughtPokemon4.size(); i++){
            if(caughtPokemon4.get(i).isAlive())
                powerpoints+=caughtPokemon4.get(i).getPower();
        }
         String spowerpoints = Integer.toString(powerpoints);

        powerpointsLabel4.setText(spowerpoints);        // TODO add your handling code here:
    }//GEN-LAST:event_powerpointsButton4ActionPerformed

    private void powerpointsButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerpointsButton5ActionPerformed
   int powerpoints=0;
        for(int i=0; i<caughtPokemon5.size(); i++){
            if(caughtPokemon5.get(i).isAlive())
                powerpoints+=caughtPokemon5.get(i).getPower();
        }
         String spowerpoints = Integer.toString(powerpoints);

        powerpointsLabel5.setText(spowerpoints);        // TODO add your handling code here:
    }//GEN-LAST:event_powerpointsButton5ActionPerformed

    private void powerpointsButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerpointsButton6ActionPerformed
   int powerpoints=0;
        for(int i=0; i<caughtPokemon6.size(); i++){
            if(caughtPokemon6.get(i).isAlive())
                powerpoints+=caughtPokemon6.get(i).getPower();
        }
         String spowerpoints = Integer.toString(powerpoints);

        powerpointsLabel6.setText(spowerpoints);        // TODO add your handling code here:
    }//GEN-LAST:event_powerpointsButton6ActionPerformed

    private void discardButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardButton1ActionPerformed
                    for(int i=0; i<objectCard1.size(); i++){
                if(Cardcombobox1.getSelectedItem()==objectCard1.get(i).getName())
                {
                     
                     objectCard1.remove(objectCard1.remove(i));
                     Cardcombobox1.removeItem(Cardcombobox1.getSelectedItem());
                
            }            }    }//GEN-LAST:event_discardButton1ActionPerformed

    private void discardButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardButton2ActionPerformed
                                    for(int i=0; i<objectCard2.size(); i++){
                if(Cardcombobox2.getSelectedItem()==objectCard2.get(i).getName())
                {
                     
                     objectCard2.remove(objectCard2.remove(i));
                     Cardcombobox2.removeItem(Cardcombobox2.getSelectedItem());
                }
            }
    }//GEN-LAST:event_discardButton2ActionPerformed

    private void discardButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardButton3ActionPerformed
          for(int i=0; i<objectCard3.size(); i++){
                if(Cardcombobox3.getSelectedItem()==objectCard3.get(i).getName())
                {
                     
                     objectCard3.remove(objectCard3.remove(i));
                     Cardcombobox3.removeItem(Cardcombobox3.getSelectedItem());
                }
            }    }//GEN-LAST:event_discardButton3ActionPerformed

    private void discardButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardButton4ActionPerformed
                            for(int i=0; i<objectCard4.size(); i++){
                if(Cardcombobox4.getSelectedItem()==objectCard4.get(i).getName())
                {
                     
                     objectCard4.remove(objectCard4.remove(i));
                     Cardcombobox4.removeItem(Cardcombobox4.getSelectedItem());
                }
            }    }//GEN-LAST:event_discardButton4ActionPerformed

    private void discardButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardButton5ActionPerformed
                for(int i=0; i<objectCard5.size(); i++){
                if(Cardcombobox5.getSelectedItem()==objectCard5.get(i).getName())
                {
                     
                     objectCard5.remove(objectCard5.remove(i));
                     Cardcombobox5.removeItem(Cardcombobox5.getSelectedItem());
                }
            }    }//GEN-LAST:event_discardButton5ActionPerformed

    private void discardButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardButton6ActionPerformed
                             for(int i=0; i<objectCard6.size(); i++){
                if(Cardcombobox6.getSelectedItem()==objectCard6.get(i).getName())
                {
                     
                     objectCard6.remove(objectCard6.remove(i));
                     Cardcombobox6.removeItem(Cardcombobox6.getSelectedItem());
                }
            }    }//GEN-LAST:event_discardButton6ActionPerformed

    private void Cardcombobox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cardcombobox1ActionPerformed
        
    }//GEN-LAST:event_Cardcombobox1ActionPerformed

    private void BattleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleButton1ActionPerformed
 boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon1.size();i++){
            if(PlayerFrame.caughtPokemon1.get(i).isAlive()){
                new ChallengeFrame(1).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }    }//GEN-LAST:event_BattleButton1ActionPerformed

    private void BattleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleButton2ActionPerformed
 boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon2.size();i++){
            if(PlayerFrame.caughtPokemon2.get(i).isAlive()){
                new ChallengeFrame(2).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }    }//GEN-LAST:event_BattleButton2ActionPerformed

    private void BattleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleButton3ActionPerformed
 boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon3.size();i++){
            if(PlayerFrame.caughtPokemon3.get(i).isAlive()){
                new ChallengeFrame(3).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }    }//GEN-LAST:event_BattleButton3ActionPerformed

    private void BattleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleButton4ActionPerformed
 boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon4.size();i++){
            if(PlayerFrame.caughtPokemon4.get(i).isAlive()){
                new ChallengeFrame(4).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }    }//GEN-LAST:event_BattleButton4ActionPerformed

    private void BattleButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleButton5ActionPerformed
 boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon5.size();i++){
            if(PlayerFrame.caughtPokemon5.get(i).isAlive()){
                new ChallengeFrame(5).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }    }//GEN-LAST:event_BattleButton5ActionPerformed

    private void BattleButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleButton6ActionPerformed
 boolean a=false;
        for(int i=0;i<PlayerFrame.caughtPokemon6.size();i++){
            if(PlayerFrame.caughtPokemon6.get(i).isAlive()){
                new ChallengeFrame(6).setVisible(true);     
                a=true;
                break;
            }
         
            
            
            
        }
        if(!a){
            JOptionPane.showMessageDialog(rootPane, "All your Pokemon are fainted ", "Sorry! ", WIDTH);

        }    }//GEN-LAST:event_BattleButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BattleButton1;
    private javax.swing.JButton BattleButton2;
    private javax.swing.JButton BattleButton3;
    private javax.swing.JButton BattleButton4;
    private javax.swing.JButton BattleButton5;
    private javax.swing.JButton BattleButton6;
    private javax.swing.JButton BattleDieButton1;
    private javax.swing.JButton BattleDieButton2;
    private javax.swing.JButton BattleDieButton3;
    private javax.swing.JButton BattleDieButton4;
    private javax.swing.JButton BattleDieButton5;
    private javax.swing.JButton BattleDieButton6;
    private javax.swing.JLabel BattleLabel1;
    private javax.swing.JLabel BattleLabel2;
    private javax.swing.JLabel BattleLabel3;
    private javax.swing.JLabel BattleLabel4;
    private javax.swing.JLabel BattleLabel5;
    private javax.swing.JLabel BattleLabel6;
    public static javax.swing.JComboBox Cardcombobox1;
    public static javax.swing.JComboBox Cardcombobox2;
    public static javax.swing.JComboBox Cardcombobox3;
    public static javax.swing.JComboBox Cardcombobox4;
    public static javax.swing.JComboBox Cardcombobox5;
    public static javax.swing.JComboBox Cardcombobox6;
    private javax.swing.JButton CatchDieButton1;
    private javax.swing.JButton CatchDieButton2;
    private javax.swing.JButton CatchDieButton3;
    private javax.swing.JButton CatchDieButton4;
    private javax.swing.JButton CatchDieButton5;
    private javax.swing.JButton CatchDieButton6;
    private javax.swing.JLabel CatchDieLabel1;
    private javax.swing.JLabel CatchDieLabel2;
    private javax.swing.JLabel CatchDieLabel3;
    private javax.swing.JLabel CatchDieLabel4;
    private javax.swing.JLabel CatchDieLabel5;
    private javax.swing.JLabel CatchDieLabel6;
    private javax.swing.JButton DrawDecisionButton1;
    private javax.swing.JButton DrawDecisionButton2;
    private javax.swing.JButton DrawDecisionButton3;
    private javax.swing.JButton DrawDecisionButton4;
    private javax.swing.JButton DrawDecisionButton5;
    private javax.swing.JButton DrawDecisionButton6;
    public static javax.swing.JButton DrawObjectButton1;
    public static javax.swing.JButton DrawObjectButton2;
    public static javax.swing.JButton DrawObjectButton3;
    public static javax.swing.JButton DrawObjectButton4;
    public static javax.swing.JButton DrawObjectButton5;
    public static javax.swing.JButton DrawObjectButton6;
    public static javax.swing.JComboBox Pokemoncombobox1;
    public static javax.swing.JComboBox Pokemoncombobox2;
    public static javax.swing.JComboBox Pokemoncombobox3;
    public static javax.swing.JComboBox Pokemoncombobox4;
    public static javax.swing.JComboBox Pokemoncombobox5;
    public static javax.swing.JComboBox Pokemoncombobox6;
    private javax.swing.JLabel RollToBattleLabel1;
    private javax.swing.JLabel RollToBattleLabel2;
    private javax.swing.JLabel RollToBattleLabel3;
    private javax.swing.JLabel RollToBattleLabel4;
    private javax.swing.JLabel RollToBattleLabel5;
    private javax.swing.JLabel RollToBattleLabel6;
    private javax.swing.JLabel RollToCatchLabel1;
    private javax.swing.JLabel RollToCatchLabel2;
    private javax.swing.JLabel RollToCatchLabel3;
    private javax.swing.JLabel RollToCatchLabel4;
    private javax.swing.JLabel RollToCatchLabel5;
    private javax.swing.JLabel RollToCatchLabel6;
    private javax.swing.JLabel RollToWalkLabel1;
    private javax.swing.JLabel RollToWalkLabel2;
    private javax.swing.JLabel RollToWalkLabel3;
    private javax.swing.JLabel RollToWalkLabel4;
    private javax.swing.JLabel RollToWalkLabel5;
    private javax.swing.JLabel RollToWalkLabel6;
    private javax.swing.JButton ShowCardButton1;
    private javax.swing.JButton ShowCardButton2;
    private javax.swing.JButton ShowCardButton3;
    private javax.swing.JButton ShowCardButton4;
    private javax.swing.JButton ShowCardButton5;
    private javax.swing.JButton ShowCardButton6;
    private javax.swing.JButton ShowPokemonButton1;
    private javax.swing.JButton ShowPokemonButton2;
    private javax.swing.JButton ShowPokemonButton3;
    private javax.swing.JButton ShowPokemonButton4;
    private javax.swing.JButton ShowPokemonButton5;
    private javax.swing.JButton ShowPokemonButton6;
    private javax.swing.JButton TradeButton1;
    private javax.swing.JButton TradeButton2;
    private javax.swing.JButton TradeButton3;
    private javax.swing.JButton TradeButton4;
    private javax.swing.JButton TradeButton5;
    private javax.swing.JButton TradeButton6;
    private javax.swing.JLabel TradeLabel1;
    private javax.swing.JLabel TradeLabel2;
    private javax.swing.JLabel TradeLabel3;
    private javax.swing.JLabel TradeLabel4;
    private javax.swing.JLabel TradeLabel5;
    private javax.swing.JLabel TradeLabel6;
    private javax.swing.JButton UseCardButton1;
    private javax.swing.JButton UseCardButton2;
    private javax.swing.JButton UseCardButton3;
    private javax.swing.JButton UseCardButton4;
    private javax.swing.JButton UseCardButton5;
    private javax.swing.JButton UseCardButton6;
    private javax.swing.JButton WalkDieButton1;
    private javax.swing.JButton WalkDieButton2;
    private javax.swing.JButton WalkDieButton3;
    private javax.swing.JButton WalkDieButton4;
    private javax.swing.JButton WalkDieButton5;
    private javax.swing.JButton WalkDieButton6;
    private javax.swing.JLabel WalkDieLabel1;
    private javax.swing.JLabel WalkDieLabel2;
    private javax.swing.JLabel WalkDieLabel3;
    private javax.swing.JLabel WalkDieLabel4;
    private javax.swing.JLabel WalkDieLabel5;
    private javax.swing.JLabel WalkDieLabel6;
    private javax.swing.JButton discardButton1;
    private javax.swing.JButton discardButton2;
    private javax.swing.JButton discardButton3;
    private javax.swing.JButton discardButton4;
    private javax.swing.JButton discardButton5;
    private javax.swing.JButton discardButton6;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton powerpointsButton1;
    private javax.swing.JButton powerpointsButton2;
    private javax.swing.JButton powerpointsButton3;
    private javax.swing.JButton powerpointsButton4;
    private javax.swing.JButton powerpointsButton5;
    private javax.swing.JButton powerpointsButton6;
    private javax.swing.JLabel powerpointsLabel1;
    private javax.swing.JLabel powerpointsLabel2;
    private javax.swing.JLabel powerpointsLabel3;
    private javax.swing.JLabel powerpointsLabel4;
    private javax.swing.JLabel powerpointsLabel5;
    private javax.swing.JLabel powerpointsLabel6;
    // End of variables declaration//GEN-END:variables

    private void myinitComponents(int numberOfPlayers) {
        switch(numberOfPlayers){
            case 2:  jTabbedPane1.setEnabledAt(2, false);
                jTabbedPane1.setEnabledAt(3, false);
                jTabbedPane1.setEnabledAt(4, false);
                jTabbedPane1.setEnabledAt(5, false);
                
                
                
                
                break;
        
        case 3: jTabbedPane1.setEnabledAt(3, false);
                jTabbedPane1.setEnabledAt(4, false);
                jTabbedPane1.setEnabledAt(5, false);
                
                

                break;
        case 4: jTabbedPane1.setEnabledAt(4, false);
                jTabbedPane1.setEnabledAt(5, false);
                

                break;
        case 5: jTabbedPane1.setEnabledAt(5, false);
        

                break;
        default:
                break;
    }
        Toolkit tk = Toolkit.getDefaultToolkit();
    Dimension d = tk.getScreenSize();
    Insets scnMax = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
int taskBarSize = scnMax.bottom;
    this.setBounds(1000, 0, d.width-1000, d.height-taskBarSize);
    
    
    Pokemoncombobox1.removeAllItems();
        Cardcombobox1.removeAllItems();
         Pokemoncombobox2.removeAllItems();
        Cardcombobox2.removeAllItems();
        Pokemoncombobox3.removeAllItems();
        Cardcombobox3.removeAllItems();
        Pokemoncombobox4.removeAllItems();
        Cardcombobox4.removeAllItems();
        Pokemoncombobox5.removeAllItems();
        Cardcombobox5.removeAllItems();
        Pokemoncombobox6.removeAllItems();
        Cardcombobox6.removeAllItems();
        
       
}
}
